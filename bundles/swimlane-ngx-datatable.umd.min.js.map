{"version":3,"sources":["../../projects/swimlane/ngx-datatable/src/lib/services/scrollbar-helper.service.ts","../../projects/swimlane/ngx-datatable/src/lib/services/dimensions-helper.service.ts","../../projects/swimlane/ngx-datatable/src/lib/services/column-changes.service.ts","../projects/swimlane/ngx-datatable/src/lib/components/footer/footer-template.directive.ts","../../projects/swimlane/ngx-datatable/src/lib/directives/visibility.directive.ts","../../projects/swimlane/ngx-datatable/src/lib/directives/draggable.directive.ts","../../projects/swimlane/ngx-datatable/src/lib/directives/resizeable.directive.ts","../../../../node_modules/tslib/tslib.es6.js","../../projects/swimlane/ngx-datatable/src/lib/directives/orderable.directive.ts","../../projects/swimlane/ngx-datatable/src/lib/directives/long-press.directive.ts","../projects/swimlane/ngx-datatable/src/lib/components/body/scroller.component.ts","../projects/swimlane/ngx-datatable/src/lib/components/body/body-group-header-template.directive.ts","../projects/swimlane/ngx-datatable/src/lib/components/body/body-group-header.directive.ts","../../projects/swimlane/ngx-datatable/src/lib/utils/column-prop-getters.ts","../../projects/swimlane/ngx-datatable/src/lib/utils/tree.ts","../../projects/swimlane/ngx-datatable/src/lib/types/column-mode.type.ts","../../projects/swimlane/ngx-datatable/src/lib/types/selection.type.ts","../../projects/swimlane/ngx-datatable/src/lib/types/sort.type.ts","../../projects/swimlane/ngx-datatable/src/lib/types/contextmenu.type.ts","../../projects/swimlane/ngx-datatable/src/lib/utils/camel-case.ts","../../projects/swimlane/ngx-datatable/src/lib/utils/id.ts","../../projects/swimlane/ngx-datatable/src/lib/utils/column-helper.ts","../projects/swimlane/ngx-datatable/src/lib/components/columns/column-header.directive.ts","../projects/swimlane/ngx-datatable/src/lib/components/columns/column-cell.directive.ts","../projects/swimlane/ngx-datatable/src/lib/components/columns/tree.directive.ts","../projects/swimlane/ngx-datatable/src/lib/components/columns/column.directive.ts","../projects/swimlane/ngx-datatable/src/lib/components/row-detail/row-detail-template.directive.ts","../projects/swimlane/ngx-datatable/src/lib/components/row-detail/row-detail.directive.ts","../projects/swimlane/ngx-datatable/src/lib/components/footer/footer.directive.ts","../../projects/swimlane/ngx-datatable/src/lib/utils/column.ts","../../projects/swimlane/ngx-datatable/src/lib/utils/row-height-cache.ts","../../projects/swimlane/ngx-datatable/src/lib/utils/prefixes.ts","../../projects/swimlane/ngx-datatable/src/lib/utils/translate.ts","../projects/swimlane/ngx-datatable/src/lib/components/body/body.component.ts","../../projects/swimlane/ngx-datatable/src/lib/types/sort-direction.type.ts","../projects/swimlane/ngx-datatable/src/lib/components/header/header.component.ts","../../projects/swimlane/ngx-datatable/src/lib/utils/throttle.ts","../../projects/swimlane/ngx-datatable/src/lib/utils/math.ts","../../projects/swimlane/ngx-datatable/src/lib/utils/sort.ts","../../projects/swimlane/ngx-datatable/src/lib/components/datatable.component.ts","../projects/swimlane/ngx-datatable/src/lib/components/header/header-cell.component.ts","../projects/swimlane/ngx-datatable/src/lib/components/footer/footer.component.ts","../projects/swimlane/ngx-datatable/src/lib/components/footer/pager.component.ts","../../projects/swimlane/ngx-datatable/src/lib/utils/keys.ts","../projects/swimlane/ngx-datatable/src/lib/components/body/progress-bar.component.ts","../projects/swimlane/ngx-datatable/src/lib/components/body/body-row.component.ts","../projects/swimlane/ngx-datatable/src/lib/components/body/body-row-wrapper.component.ts","../projects/swimlane/ngx-datatable/src/lib/components/body/body-cell.component.ts","../../projects/swimlane/ngx-datatable/src/lib/utils/selection.ts","../projects/swimlane/ngx-datatable/src/lib/components/body/selection.component.ts","../esm2015/projects/swimlane/ngx-datatable/src/lib/components/body/summary/summary-row.component.ts","../../projects/swimlane/ngx-datatable/src/lib/types/click.type.ts","../../../projects/swimlane/ngx-datatable/src/lib/ngx-datatable.module.ts","../../projects/swimlane/ngx-datatable/src/lib/utils/elm-from-point.ts"],"names":["ScrollbarHelper","document","this","width","getWidth","prototype","outer","createElement","style","visibility","msOverflowStyle","body","appendChild","widthNoScroll","offsetWidth","overflow","inner","widthWithScroll","parentNode","removeChild","Injectable","Inject","args","DOCUMENT","DimensionsHelper","getDimensions","element","getBoundingClientRect","ColumnChangesService","columnInputChanges","Subject","Object","defineProperty","asObservable","onInputChange","next","template","Directive","selector","TemplateRef","VisibilityDirective","zone","isVisible","visible","EventEmitter","ngOnInit","runCheck","ngOnDestroy","clearTimeout","timeout","onVisibilityChange","_this","run","emit","check","_a","nativeElement","offsetHeight","runOutsideAngular","setTimeout","ElementRef","NgZone","HostBinding","Output","DraggableDirective","dragX","dragY","dragStart","dragging","dragEnd","isDragging","ngOnChanges","changes","currentValue","dragModel","onMousedown","_destroySubscription","onMouseup","event","classList","remove","subscription","model","target","contains","preventDefault","mouseDownPos_1","x","clientX","y","clientY","mouseup","fromEvent","subscribe","ev","mouseMoveSub","pipe","takeUntil","move","add","mouseDownPos","left","top","unsubscribe","undefined","Input","ResizeableDirective","renderer","resizeEnabled","resize","resizing","ngAfterViewInit","renderer2","resizeHandle","addClass","destroyNode","closed","clientWidth","isHandle","initialWidth","mouseDownScreenX","screenX","stopPropagation","e","newWidth","overMinWidth","minWidth","underMaxWidth","maxWidth","host","[class.resizeable]","Renderer2","HostListener","create","__values","o","s","Symbol","iterator","m","i","call","length","value","done","TypeError","__read","n","r","ar","push","error","__spread","arguments","concat","OrderableDirective","differs","reorder","targetChanged","differ","find","ngAfterContentInit","updateSubscriptions","draggables","bind","forEach","d","diffs","diff","createMapDiffs","unsubscribe_1","previousValue","forEachAddedItem","onDragStart","onDragging","onDragEnd","forEachRemovedItem","positions","_b","toArray","_c","dragger","elm","parseInt","offsetLeft","toString","prop","right","index","prevPos","isTarget","lastDraggingIndex","prevIndex","newIndex","initialIndex","targets","elementsFromPoint","pos","this_1","el","reduce","acc","curr","$$id","KeyValueDiffers","ContentChildren","descendants","LongPressDirective","pressEnabled","duration","longPressStart","longPressing","longPressEnd","mouseX","mouseY","pressing","isLongPressing","onMouseDown","which","pressModel","mouseEvent","onMouseMove","loop","xThres","Math","abs","yThres","endPress","ScrollerComponent","ngZone","scrollbarV","scrollbarH","scroll","scrollYPos","scrollXPos","prevScrollYPos","prevScrollXPos","_scrollEventListener","parentElement","onScrolled","addEventListener","removeEventListener","setOffset","offsetY","scrollTop","dom","currentTarget","requestAnimationFrame","scrollLeft","updateOffset","direction","Component","class","changeDetection","ChangeDetectionStrategy","OnPush","type","DatatableGroupHeaderDirective","rowHeight","toggle","_templateInput","_templateQuery","toggleExpandGroup","group","expandAllGroups","collapseAllGroups","emptyStringGetter","getterForProp","numericIndexGetter","indexOf","deepValueGetter","shallowValueGetter","row","obj","fieldName","path","current","split","optionalGetterForProp","groupRowsByParents","rows","from","to","nodeById","l","node","TreeNode","uniqIDs","arr","item","toValue","parent","fromValue","children","resolvedRows_1","flatten","ContentChild","DatatableGroupHeaderTemplateDirective","read","static","ColumnMode","SelectionType","SortType","ContextmenuType","level","treeStatus","f","recursive","child","apply","Array","slice","camelCase","str","replace","trim","toLowerCase","a","b","c","toUpperCase","deCamelCase","match","id","random","pow","setColumnDefaults","columns","treeColumnFound","columns_1","columns_1_1","column","isNullOrUndefined","name","$$valueGetter","String","hasOwnProperty","resizeable","sortable","draggable","canAutoResize","isTreeColumn","translateTemplates","templates","result","templates_1","templates_1_1","temp","col","props","getOwnPropertyNames","props_1","e_3","props_1_1","headerTemplate","cellTemplate","summaryFunc","summaryTemplate","DataTableColumnDirective","columnChangesService","isFirstChange","_cellTemplateInput","_cellTemplateQuery","_headerTemplateInput","_headerTemplateQuery","_treeToggleTemplateInput","_treeToggleTemplateQuery","DataTableColumnCellDirective","DataTableColumnHeaderDirective","DataTableColumnCellTreeToggle","DatatableRowDetailDirective","toggleExpandRow","expandAllRows","collapseAllRows","DatatableRowDetailTemplateDirective","DatatableFooterDirective","columnsByPin","cols","ret","center","cols_1","cols_1_1","frozenLeft","frozenRight","columnGroupWidths","groups","all","columnTotalWidth","total","floor","totalWidth","parseFloat","columnsTotalWidth","columns_2","columns_2_1","columnsByPinArr","val","colsByPinArr","colsByPin","DataTableFooterTemplateDirective","RowHeightCache","treeArray","clearCache","initCache","details","detailRowHeight","externalVirtual","rowCount","rowIndexes","rowExpansions","isFn","isDetailFn","isNaN","Error","currentRowHeight","expanded","has","get","update","getRowIndex","scrollY","calcRowIndex","atRowIndex","byRowHeight","query","atIndex","sum","queryBetween","atIndexA","atIndexB","dataLength","blockSize","nextPos","cache","testStyle","styles","window","getComputedStyle","documentElement","join","pre","RegExp","lowercase","css","js","substr","prefix","getVendorPrefixedName","property","transform","backfaceVisibility","hasCSSTransforms","hasCSS3DTransforms","ua","navigator","userAgent","isSafari","test","translateXY","DataTableBodyComponent","cd","selected","page","activate","select","detailToggle","rowContextmenu","treeAction","rowHeightsCache","indexes","WeakMap","getDetailRowHeight","rowDetail","rowTrackingFn","idx","trackByProp","groupHeader","listener","setGroupHeaderListener","_pageSize","recalcLayout","_rows","_columns","_offset","virtualization","_rowCount","innerWidth","_bodyHeight","selectionType","toggleRowExpansion","toggleAllRows","updateIndexes","updateRows","markForCheck","updateOffsetY","offset","scroller","rowIndex","pageSize","onBodyScroll","offsetX","updatePage","first","ceil","last","groupedRows","set","g","_idx","getRowHeight","getGroupHeight","getRowAndDetailHeight","getRowExpanded","getRowsStyles","getBottomSummaryRowStyles","position","hideIndicator","loadingIndicator","height","bodyHeight","externalPaging","max","min","refreshRowHeightCache","Set","getAdjustedViewPortIndex","viewPortFirstRowIndex","rowExpandedIdx","getRowExpandedIdx","splice","isAllGroupCollapsed","currentIndex","columnTrackingFn","stylesByGroup","widths","bodyWidth","groupExpansionDefault","rowId","rowIdentity","findIndex","onTreeAction","ChangeDetectorRef","ViewChild","SortDirection","DataTableHeaderComponent","sort","columnContextmenu","_columnGroupWidths","_styleByGroup","destroyed","_innerWidth","colByPin","setStylesByGroup","_headerHeight","_columnsByPin","_offsetX","onLongPressStart","dragEventTarget","onLongPressEnd","trackByGroups","colGroup","onColumnResized","prevValue","newValue","onColumnReordered","getColumn","targetMarkerContext","onTargetChanged","oldColumn","newColumn","leftColumnCount","centerColumnCount","onSort","sorts","calcNewSorts","map","assign","dir","sortType","single","calcStylesByGroup","detectChanges","throttle","func","wait","options","context","previous","later","leading","Date","now","remaining","trailing","throttleable","key","descriptor","configurable","enumerable","getTotalFlexGrow","totalFlexGrow","flexGrow","adjustColumnWidths","allColumns","expectedWidth","columnsWidth","colsByGroup","attr","e_2","_d","hasMinWidth","remainingWidth","widthPerFlexPoint","_e","_f","scaleColumns","forceFillColumnWidths","startIdx","allowBleed","defaultColWidth","columnsToResize","filter","columnsToResize_1","columnsToResize_1_1","$$oldWidth","additionWidthPerColumn","exceedsWindow","contentWidth","getContentWidth","columnsProcessed","columnsToResize_2","e_5","columnsToResize_2_1","newSize","removeProcessedColumns","columnsProcessed_1","columnsProcessed_1_1","allColumns_1","allColumns_1_1","nextSortDir","asc","desc","orderByComparator","isFinite","sortRows","dirs","rowToIndexMap","Map","comparator","cachedDirs","valueGetter","compareFn","rowA","rowB","cachedDirs_1","cachedDirs_1_1","cachedDir","propA","propB","comparison","DatatableComponent","scrollbarHelper","dimensionsHelper","configuration","columnMode","standard","headerHeight","footerHeight","externalSorting","reorderable","swapColumns","cssClasses","sortAscending","sortDescending","sortUnset","pagerLeftArrow","pagerRightArrow","pagerPrevious","pagerNext","messages","emptyMessage","totalMessage","selectedMessage","selectAllRowsOnPage","summaryRow","summaryHeight","summaryPosition","tableContextmenu","BehaviorSubject","_count","_subscriptions","_groupRowsBy","rowDiffer","_internalRows","sortInternalRows","treeFromRelation","treeToRelation","recalculate","groupArrayBy","_internalColumns","recalculateColumns","_limit","checkbox","cell","multi","multiClick","_columnTemplates","translateColumns","allRowsSelected","bodyComponent","rowsOnPage","count","limit","columnTemplates","v","listenForColumnInputChanges","originalArray","groupBy","ngDoCheck","recalculatePages","recalculateDims","onWindowResize","forceIdx","force","flex","dims","calcPageSize","calcRowCount","onBodyPage","onFooterPage","size","onColumnContextmenu","header","content","onRowContextmenu","onColumnResize","onColumnReorder","prevCol","movedCol","onColumnSort","onHeaderSelect","selectableRows","selectCheck","allSelected","onBodySelect","columnInputChanges$","notifyOnChanges","encapsulation","ViewEncapsulation","None","decorators","SkipSelf","Optional","getOwnPropertyDescriptor","Reflect","decorate","__decorate","DataTableHeaderCellComponent","sortFn","selectFn","cellContext","sortDir","_allRowsSelected","_column","_sorts","calcSortDir","sortClass","calcSortClass","cls","headerClass","res","keys","keys_1","keys_1_1","k","checkboxable","headerCheckboxable","onContextmenu","$event","sortAscendingIcon","sortDescendingIcon","sortUnsetIcon","DataTableFooterComponent","selectedCount","DataTablePagerComponent","showLastPage","change","_page","_size","pages","calcPages","canPrevious","canNext","totalPages","prevPage","selectPage","nextPage","startPage","endPage","isMaxSized","maxSize","num","number","text","Keys","DataTableBodyRowComponent","_groupStyles","_element","_rowDiffer","buildStylesByGroup","isSelected","rowClass","onActivate","cellIndex","rowElement","onKeyDown","keyCode","isTargetRow","return","down","up","onMouseenter","DataTableRowWrapperComponent","_expanded","groupContext","rowContext","_rowIndex","getGroupHeaderStyle","DataTableBodyCellComponent","isFocused","onCheckboxChangeFn","onCheckboxChange","activateFn","_group","checkValueUpdates","_rowHeight","_isSelected","_row","_treeStatus","status","cellClass","clear","userPipe","sanitizedValue","stripHtml","onFocus","onBlur","onClick","cellElement","onDblClick","isTargetCell","html","calcLeftMargin","levelIndent","treeLevelIndent","selectRows","comparefn","selectedIndex","selectRowsBetween","reverse","range","start","end","ViewContainerRef","DataTableSelectionComponent","selectRow","selectEnabled","MouseEvent","composedPath","startsWith","chkbox","shiftKey","getRowSelectedIdx","ctrlKey","metaKey","onKeyboardFocus","isCellSelection","focusCell","focusRow","nextRowElement","getPrevNextRow","focus","focusElement","previousElementSibling","nextElementSibling","nextCellElement","getElementsByClassName","getRowSelected","defaultSumFunc","cells","cellsWithValues","some","noopSumFunc","DataTableSummaryRowComponent","updateInternalColumns","updateValues","cellsFromSingleColumn","sumFunc","getSummaryFunction","ClickType","NgxDatatableModule","forRoot","ngModule","providers","provide","useValue","elements","previousPointerEvents","elementFromPoint","getPropertyValue","priority","getPropertyPriority","setProperty","NgModule","imports","CommonModule","declarations","ProgressBarComponent","exports"],"mappings":"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","sourcesContent":["import { Inject, Injectable } from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\n\r\n/**\r\n * Gets the width of the scrollbar.  Nesc for windows\r\n * http://stackoverflow.com/a/13382873/888165\r\n */\r\n@Injectable()\r\nexport class ScrollbarHelper {\r\n  width: number = this.getWidth();\r\n\r\n  constructor(@Inject(DOCUMENT) private document: any) {}\r\n\r\n  getWidth(): number {\r\n    const outer = this.document.createElement('div');\r\n    outer.style.visibility = 'hidden';\r\n    outer.style.width = '100px';\r\n    outer.style.msOverflowStyle = 'scrollbar';\r\n    this.document.body.appendChild(outer);\r\n\r\n    const widthNoScroll = outer.offsetWidth;\r\n    outer.style.overflow = 'scroll';\r\n\r\n    const inner = this.document.createElement('div');\r\n    inner.style.width = '100%';\r\n    outer.appendChild(inner);\r\n\r\n    const widthWithScroll = inner.offsetWidth;\r\n    outer.parentNode.removeChild(outer);\r\n\r\n    return widthNoScroll - widthWithScroll;\r\n  }\r\n}\r\n","import { Inject, Injectable } from '@angular/core';\r\n\r\n/**\r\n * Gets the width of the scrollbar.  Nesc for windows\r\n * http://stackoverflow.com/a/13382873/888165\r\n */\r\n@Injectable()\r\nexport class DimensionsHelper {\r\n  getDimensions(element: Element): ClientRect {\r\n    return element.getBoundingClientRect();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { Observable, Subject } from 'rxjs';\r\n\r\n/**\r\n * service to make DatatableComponent aware of changes to\r\n * input bindings of DataTableColumnDirective\r\n */\r\n@Injectable()\r\nexport class ColumnChangesService {\r\n  private columnInputChanges = new Subject<undefined>();\r\n\r\n  get columnInputChanges$(): Observable<undefined> {\r\n    return this.columnInputChanges.asObservable();\r\n  }\r\n\r\n  onInputChange(): void {\r\n    this.columnInputChanges.next();\r\n  }\r\n}\r\n","import { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({ selector: '[ngx-datatable-footer-template]' })\r\nexport class DataTableFooterTemplateDirective {\r\n  constructor(public template: TemplateRef<any>) {}\r\n}\r\n","import { Directive, Output, EventEmitter, ElementRef, HostBinding, NgZone, OnInit, OnDestroy } from '@angular/core';\r\n\r\n/**\r\n * Visibility Observer Directive\r\n *\r\n * Usage:\r\n *\r\n * \t\t<div\r\n * \t\t\tvisibilityObserver\r\n * \t\t\t(visible)=\"onVisible($event)\">\r\n * \t\t</div>\r\n *\r\n */\r\n@Directive({ selector: '[visibilityObserver]' })\r\nexport class VisibilityDirective implements OnInit, OnDestroy {\r\n  @HostBinding('class.visible')\r\n  isVisible: boolean = false;\r\n\r\n  @Output() visible: EventEmitter<any> = new EventEmitter();\r\n\r\n  timeout: any;\r\n\r\n  constructor(private element: ElementRef, private zone: NgZone) {}\r\n\r\n  ngOnInit(): void {\r\n    this.runCheck();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    clearTimeout(this.timeout);\r\n  }\r\n\r\n  onVisibilityChange(): void {\r\n    // trigger zone recalc for columns\r\n    this.zone.run(() => {\r\n      this.isVisible = true;\r\n      this.visible.emit(true);\r\n    });\r\n  }\r\n\r\n  runCheck(): void {\r\n    const check = () => {\r\n      // https://davidwalsh.name/offsetheight-visibility\r\n      const { offsetHeight, offsetWidth } = this.element.nativeElement;\r\n\r\n      if (offsetHeight && offsetWidth) {\r\n        clearTimeout(this.timeout);\r\n        this.onVisibilityChange();\r\n      } else {\r\n        clearTimeout(this.timeout);\r\n        this.zone.runOutsideAngular(() => {\r\n          this.timeout = setTimeout(() => check(), 50);\r\n        });\r\n      }\r\n    };\r\n\r\n    this.timeout = setTimeout(() => check());\r\n  }\r\n}\r\n","import { Directive, ElementRef, Input, Output, EventEmitter, OnDestroy, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { Subscription, fromEvent } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\n/**\r\n * Draggable Directive for Angular2\r\n *\r\n * Inspiration:\r\n *   https://github.com/AngularClass/angular2-examples/blob/master/rx-draggable/directives/draggable.ts\r\n *   http://stackoverflow.com/questions/35662530/how-to-implement-drag-and-drop-in-angular2\r\n *\r\n */\r\n@Directive({ selector: '[draggable]' })\r\nexport class DraggableDirective implements OnDestroy, OnChanges {\r\n  @Input() dragEventTarget: any;\r\n  @Input() dragModel: any;\r\n  @Input() dragX: boolean = true;\r\n  @Input() dragY: boolean = true;\r\n\r\n  @Output() dragStart: EventEmitter<any> = new EventEmitter();\r\n  @Output() dragging: EventEmitter<any> = new EventEmitter();\r\n  @Output() dragEnd: EventEmitter<any> = new EventEmitter();\r\n\r\n  element: HTMLElement;\r\n  isDragging: boolean = false;\r\n  subscription: Subscription;\r\n\r\n  constructor(element: ElementRef) {\r\n    this.element = element.nativeElement;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes['dragEventTarget'] && changes['dragEventTarget'].currentValue && this.dragModel.dragging) {\r\n      this.onMousedown(changes['dragEventTarget'].currentValue);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this._destroySubscription();\r\n  }\r\n\r\n  onMouseup(event: MouseEvent): void {\r\n    if (!this.isDragging) return;\r\n\r\n    this.isDragging = false;\r\n    this.element.classList.remove('dragging');\r\n\r\n    if (this.subscription) {\r\n      this._destroySubscription();\r\n      this.dragEnd.emit({\r\n        event,\r\n        element: this.element,\r\n        model: this.dragModel\r\n      });\r\n    }\r\n  }\r\n\r\n  onMousedown(event: MouseEvent): void {\r\n    // we only want to drag the inner header text\r\n    const isDragElm = (<HTMLElement>event.target).classList.contains('draggable');\r\n\r\n    if (isDragElm && (this.dragX || this.dragY)) {\r\n      event.preventDefault();\r\n      this.isDragging = true;\r\n\r\n      const mouseDownPos = { x: event.clientX, y: event.clientY };\r\n\r\n      const mouseup = fromEvent(document, 'mouseup');\r\n      this.subscription = mouseup.subscribe((ev: MouseEvent) => this.onMouseup(ev));\r\n\r\n      const mouseMoveSub = fromEvent(document, 'mousemove')\r\n        .pipe(takeUntil(mouseup))\r\n        .subscribe((ev: MouseEvent) => this.move(ev, mouseDownPos));\r\n\r\n      this.subscription.add(mouseMoveSub);\r\n\r\n      this.dragStart.emit({\r\n        event,\r\n        element: this.element,\r\n        model: this.dragModel\r\n      });\r\n    }\r\n  }\r\n\r\n  move(event: MouseEvent, mouseDownPos: { x: number; y: number }): void {\r\n    if (!this.isDragging) return;\r\n\r\n    const x = event.clientX - mouseDownPos.x;\r\n    const y = event.clientY - mouseDownPos.y;\r\n\r\n    if (this.dragX) this.element.style.left = `${x}px`;\r\n    if (this.dragY) this.element.style.top = `${y}px`;\r\n\r\n    this.element.classList.add('dragging');\r\n\r\n    this.dragging.emit({\r\n      event,\r\n      element: this.element,\r\n      model: this.dragModel\r\n    });\r\n  }\r\n\r\n  private _destroySubscription(): void {\r\n    if (this.subscription) {\r\n      this.subscription.unsubscribe();\r\n      this.subscription = undefined;\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Directive,\r\n  ElementRef,\r\n  HostListener,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnDestroy,\r\n  AfterViewInit,\r\n  Renderer2\r\n} from '@angular/core';\r\nimport { Subscription, fromEvent } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\n@Directive({\r\n  selector: '[resizeable]',\r\n  host: {\r\n    '[class.resizeable]': 'resizeEnabled'\r\n  }\r\n})\r\nexport class ResizeableDirective implements OnDestroy, AfterViewInit {\r\n  @Input() resizeEnabled: boolean = true;\r\n  @Input() minWidth: number;\r\n  @Input() maxWidth: number;\r\n\r\n  @Output() resize: EventEmitter<any> = new EventEmitter();\r\n\r\n  element: HTMLElement;\r\n  subscription: Subscription;\r\n  resizing: boolean = false;\r\n  private resizeHandle: HTMLElement;\r\n\r\n  constructor(element: ElementRef, private renderer: Renderer2) {\r\n    this.element = element.nativeElement;\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    const renderer2 = this.renderer;\r\n    this.resizeHandle = renderer2.createElement('span');\r\n    if (this.resizeEnabled) {\r\n      renderer2.addClass(this.resizeHandle, 'resize-handle');\r\n    } else {\r\n      renderer2.addClass(this.resizeHandle, 'resize-handle--not-resizable');\r\n    }\r\n    renderer2.appendChild(this.element, this.resizeHandle);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this._destroySubscription();\r\n    if (this.renderer.destroyNode) {\r\n      this.renderer.destroyNode(this.resizeHandle);\r\n    } else if (this.resizeHandle) {\r\n      this.renderer.removeChild(this.renderer.parentNode(this.resizeHandle), this.resizeHandle);\r\n    }\r\n  }\r\n\r\n  onMouseup(): void {\r\n    this.resizing = false;\r\n\r\n    if (this.subscription && !this.subscription.closed) {\r\n      this._destroySubscription();\r\n      this.resize.emit(this.element.clientWidth);\r\n    }\r\n  }\r\n\r\n  @HostListener('mousedown', ['$event'])\r\n  onMousedown(event: MouseEvent): void {\r\n    const isHandle = (<HTMLElement>event.target).classList.contains('resize-handle');\r\n    const initialWidth = this.element.clientWidth;\r\n    const mouseDownScreenX = event.screenX;\r\n\r\n    if (isHandle) {\r\n      event.stopPropagation();\r\n      this.resizing = true;\r\n\r\n      const mouseup = fromEvent(document, 'mouseup');\r\n      this.subscription = mouseup.subscribe((ev: MouseEvent) => this.onMouseup());\r\n\r\n      const mouseMoveSub = fromEvent(document, 'mousemove')\r\n        .pipe(takeUntil(mouseup))\r\n        .subscribe((e: MouseEvent) => this.move(e, initialWidth, mouseDownScreenX));\r\n\r\n      this.subscription.add(mouseMoveSub);\r\n    }\r\n  }\r\n\r\n  move(event: MouseEvent, initialWidth: number, mouseDownScreenX: number): void {\r\n    const movementX = event.screenX - mouseDownScreenX;\r\n    const newWidth = initialWidth + movementX;\r\n\r\n    const overMinWidth = !this.minWidth || newWidth >= this.minWidth;\r\n    const underMaxWidth = !this.maxWidth || newWidth <= this.maxWidth;\r\n\r\n    if (overMinWidth && underMaxWidth) {\r\n      this.element.style.width = `${newWidth}px`;\r\n    }\r\n  }\r\n\r\n  private _destroySubscription() {\r\n    if (this.subscription) {\r\n      this.subscription.unsubscribe();\r\n      this.subscription = undefined;\r\n    }\r\n  }\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import {\r\n  Directive,\r\n  Output,\r\n  EventEmitter,\r\n  ContentChildren,\r\n  QueryList,\r\n  KeyValueDiffers,\r\n  AfterContentInit,\r\n  OnDestroy,\r\n  Inject\r\n} from '@angular/core';\r\nimport { DraggableDirective } from './draggable.directive';\r\nimport { DOCUMENT } from '@angular/common';\r\n\r\n@Directive({ selector: '[orderable]' })\r\nexport class OrderableDirective implements AfterContentInit, OnDestroy {\r\n  @Output() reorder: EventEmitter<any> = new EventEmitter();\r\n  @Output() targetChanged: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChildren(DraggableDirective, { descendants: true })\r\n  draggables: QueryList<DraggableDirective>;\r\n\r\n  positions: any;\r\n  differ: any;\r\n  lastDraggingIndex: number;\r\n\r\n  constructor(differs: KeyValueDiffers, @Inject(DOCUMENT) private document: any) {\r\n    this.differ = differs.find({}).create();\r\n  }\r\n\r\n  ngAfterContentInit(): void {\r\n    // HACK: Investigate Better Way\r\n    this.updateSubscriptions();\r\n    this.draggables.changes.subscribe(this.updateSubscriptions.bind(this));\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.draggables.forEach(d => {\r\n      d.dragStart.unsubscribe();\r\n      d.dragging.unsubscribe();\r\n      d.dragEnd.unsubscribe();\r\n    });\r\n  }\r\n\r\n  updateSubscriptions(): void {\r\n    const diffs = this.differ.diff(this.createMapDiffs());\r\n\r\n    if (diffs) {\r\n      const subscribe = ({ currentValue, previousValue }: any) => {\r\n        unsubscribe({ previousValue });\r\n\r\n        if (currentValue) {\r\n          currentValue.dragStart.subscribe(this.onDragStart.bind(this));\r\n          currentValue.dragging.subscribe(this.onDragging.bind(this));\r\n          currentValue.dragEnd.subscribe(this.onDragEnd.bind(this));\r\n        }\r\n      };\r\n\r\n      const unsubscribe = ({ previousValue }: any) => {\r\n        if (previousValue) {\r\n          previousValue.dragStart.unsubscribe();\r\n          previousValue.dragging.unsubscribe();\r\n          previousValue.dragEnd.unsubscribe();\r\n        }\r\n      };\r\n\r\n      diffs.forEachAddedItem(subscribe);\r\n      // diffs.forEachChangedItem(subscribe.bind(this));\r\n      diffs.forEachRemovedItem(unsubscribe);\r\n    }\r\n  }\r\n\r\n  onDragStart(): void {\r\n    this.positions = {};\r\n\r\n    let i = 0;\r\n    for (const dragger of this.draggables.toArray()) {\r\n      const elm = dragger.element;\r\n      const left = parseInt(elm.offsetLeft.toString(), 0);\r\n      this.positions[dragger.dragModel.prop] = {\r\n        left,\r\n        right: left + parseInt(elm.offsetWidth.toString(), 0),\r\n        index: i++,\r\n        element: elm\r\n      };\r\n    }\r\n  }\r\n\r\n  onDragging({ element, model, event }: any): void {\r\n    const prevPos = this.positions[model.prop];\r\n    const target = this.isTarget(model, event);\r\n\r\n    if (target) {\r\n      if (this.lastDraggingIndex !== target.i) {\r\n        this.targetChanged.emit({\r\n          prevIndex: this.lastDraggingIndex,\r\n          newIndex: target.i,\r\n          initialIndex: prevPos.index\r\n        });\r\n        this.lastDraggingIndex = target.i;\r\n      }\r\n    } else if (this.lastDraggingIndex !== prevPos.index) {\r\n      this.targetChanged.emit({\r\n        prevIndex: this.lastDraggingIndex,\r\n        initialIndex: prevPos.index\r\n      });\r\n      this.lastDraggingIndex = prevPos.index;\r\n    }\r\n  }\r\n\r\n  onDragEnd({ element, model, event }: any): void {\r\n    const prevPos = this.positions[model.prop];\r\n\r\n    const target = this.isTarget(model, event);\r\n    if (target) {\r\n      this.reorder.emit({\r\n        prevIndex: prevPos.index,\r\n        newIndex: target.i,\r\n        model\r\n      });\r\n    }\r\n\r\n    this.lastDraggingIndex = undefined;\r\n    element.style.left = 'auto';\r\n  }\r\n\r\n  isTarget(model: any, event: any): any {\r\n    let i = 0;\r\n    const x = event.x || event.clientX;\r\n    const y = event.y || event.clientY;\r\n    const targets = this.document.elementsFromPoint(x, y);\r\n\r\n    for (const prop in this.positions) {\r\n      // current column position which throws event.\r\n      const pos = this.positions[prop];\r\n\r\n      // since we drag the inner span, we need to find it in the elements at the cursor\r\n      if (model.prop !== prop && targets.find((el: any) => el === pos.element)) {\r\n        return {\r\n          pos,\r\n          i\r\n        };\r\n      }\r\n\r\n      i++;\r\n    }\r\n  }\r\n\r\n  private createMapDiffs(): { [key: string]: DraggableDirective } {\r\n    return this.draggables.toArray().reduce((acc, curr) => {\r\n      acc[curr.dragModel.$$id] = curr;\r\n      return acc;\r\n    }, {});\r\n  }\r\n}\r\n","import { Directive, Input, Output, EventEmitter, HostBinding, HostListener, OnDestroy } from '@angular/core';\r\nimport { Observable, Subscription, fromEvent } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { MouseEvent } from '../events';\r\n\r\n@Directive({ selector: '[long-press]' })\r\nexport class LongPressDirective implements OnDestroy {\r\n  @Input() pressEnabled: boolean = true;\r\n  @Input() pressModel: any;\r\n  @Input() duration: number = 500;\r\n\r\n  @Output() longPressStart: EventEmitter<any> = new EventEmitter();\r\n  @Output() longPressing: EventEmitter<any> = new EventEmitter();\r\n  @Output() longPressEnd: EventEmitter<any> = new EventEmitter();\r\n\r\n  pressing: boolean;\r\n  isLongPressing: boolean;\r\n  timeout: any;\r\n  mouseX: number = 0;\r\n  mouseY: number = 0;\r\n\r\n  subscription: Subscription;\r\n\r\n  @HostBinding('class.press')\r\n  get press(): boolean {\r\n    return this.pressing;\r\n  }\r\n\r\n  @HostBinding('class.longpress')\r\n  get isLongPress(): boolean {\r\n    return this.isLongPressing;\r\n  }\r\n\r\n  @HostListener('mousedown', ['$event'])\r\n  onMouseDown(event: MouseEvent): void {\r\n    // don't do right/middle clicks\r\n    if (event.which !== 1 || !this.pressEnabled) return;\r\n\r\n    // don't start drag if its on resize handle\r\n    const target = <HTMLElement>event.target;\r\n    if (target.classList.contains('resize-handle')) return;\r\n\r\n    this.mouseX = event.clientX;\r\n    this.mouseY = event.clientY;\r\n\r\n    this.pressing = true;\r\n    this.isLongPressing = false;\r\n\r\n    const mouseup = fromEvent(document, 'mouseup');\r\n    this.subscription = mouseup.subscribe((ev: MouseEvent) => this.onMouseup());\r\n\r\n    this.timeout = setTimeout(() => {\r\n      this.isLongPressing = true;\r\n      this.longPressStart.emit({\r\n        event,\r\n        model: this.pressModel\r\n      });\r\n\r\n      this.subscription.add(\r\n        fromEvent(document, 'mousemove')\r\n          .pipe(takeUntil(mouseup))\r\n          .subscribe((mouseEvent: MouseEvent) => this.onMouseMove(mouseEvent))\r\n      );\r\n\r\n      this.loop(event);\r\n    }, this.duration);\r\n\r\n    this.loop(event);\r\n  }\r\n\r\n  onMouseMove(event: MouseEvent): void {\r\n    if (this.pressing && !this.isLongPressing) {\r\n      const xThres = Math.abs(event.clientX - this.mouseX) > 10;\r\n      const yThres = Math.abs(event.clientY - this.mouseY) > 10;\r\n\r\n      if (xThres || yThres) {\r\n        this.endPress();\r\n      }\r\n    }\r\n  }\r\n\r\n  loop(event: MouseEvent): void {\r\n    if (this.isLongPressing) {\r\n      this.timeout = setTimeout(() => {\r\n        this.longPressing.emit({\r\n          event,\r\n          model: this.pressModel\r\n        });\r\n        this.loop(event);\r\n      }, 50);\r\n    }\r\n  }\r\n\r\n  endPress(): void {\r\n    clearTimeout(this.timeout);\r\n    this.isLongPressing = false;\r\n    this.pressing = false;\r\n    this._destroySubscription();\r\n\r\n    this.longPressEnd.emit({\r\n      model: this.pressModel\r\n    });\r\n  }\r\n\r\n  onMouseup(): void {\r\n    this.endPress();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this._destroySubscription();\r\n  }\r\n\r\n  private _destroySubscription(): void {\r\n    if (this.subscription) {\r\n      this.subscription.unsubscribe();\r\n      this.subscription = undefined;\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ElementRef,\r\n  Output,\r\n  EventEmitter,\r\n  Renderer2,\r\n  NgZone,\r\n  OnInit,\r\n  OnDestroy,\r\n  HostBinding,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\n\r\nimport { MouseEvent } from '../../events';\r\n\r\n@Component({\r\n  selector: 'datatable-scroller',\r\n  template: ` <ng-content></ng-content> `,\r\n  host: {\r\n    class: 'datatable-scroll'\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ScrollerComponent implements OnInit, OnDestroy {\r\n  @Input() scrollbarV: boolean = false;\r\n  @Input() scrollbarH: boolean = false;\r\n\r\n  @HostBinding('style.height.px')\r\n  @Input()\r\n  scrollHeight: number;\r\n\r\n  @HostBinding('style.width.px')\r\n  @Input()\r\n  scrollWidth: number;\r\n\r\n  @Output() scroll: EventEmitter<any> = new EventEmitter();\r\n\r\n  scrollYPos: number = 0;\r\n  scrollXPos: number = 0;\r\n  prevScrollYPos: number = 0;\r\n  prevScrollXPos: number = 0;\r\n  element: any;\r\n  parentElement: any;\r\n  onScrollListener: any;\r\n\r\n  private _scrollEventListener: any = null;\r\n\r\n  constructor(private ngZone: NgZone, element: ElementRef, private renderer: Renderer2) {\r\n    this.element = element.nativeElement;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // manual bind so we don't always listen\r\n    if (this.scrollbarV || this.scrollbarH) {\r\n      const renderer = this.renderer;\r\n      this.parentElement = renderer.parentNode(renderer.parentNode(this.element));\r\n      this._scrollEventListener = this.onScrolled.bind(this);\r\n      this.parentElement.addEventListener('scroll', this._scrollEventListener);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this._scrollEventListener) {\r\n      this.parentElement.removeEventListener('scroll', this._scrollEventListener);\r\n      this._scrollEventListener = null;\r\n    }\r\n  }\r\n\r\n  setOffset(offsetY: number): void {\r\n    if (this.parentElement) {\r\n      this.parentElement.scrollTop = offsetY;\r\n    }\r\n  }\r\n\r\n  onScrolled(event: MouseEvent): void {\r\n    const dom: Element = <Element>event.currentTarget;\r\n    requestAnimationFrame(() => {\r\n      this.scrollYPos = dom.scrollTop;\r\n      this.scrollXPos = dom.scrollLeft;\r\n      this.updateOffset();\r\n    });\r\n  }\r\n\r\n  updateOffset(): void {\r\n    let direction: string;\r\n    if (this.scrollYPos < this.prevScrollYPos) {\r\n      direction = 'down';\r\n    } else if (this.scrollYPos > this.prevScrollYPos) {\r\n      direction = 'up';\r\n    }\r\n\r\n    this.scroll.emit({\r\n      direction,\r\n      scrollYPos: this.scrollYPos,\r\n      scrollXPos: this.scrollXPos\r\n    });\r\n\r\n    this.prevScrollYPos = this.scrollYPos;\r\n    this.prevScrollXPos = this.scrollXPos;\r\n  }\r\n}\r\n","import { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[ngx-datatable-group-header-template]'\r\n})\r\nexport class DatatableGroupHeaderTemplateDirective {\r\n  constructor(public template: TemplateRef<any>) {}\r\n}\r\n","import { Input, Output, EventEmitter, Directive, TemplateRef, ContentChild } from '@angular/core';\r\nimport { DatatableGroupHeaderTemplateDirective } from './body-group-header-template.directive';\r\n\r\n@Directive({ selector: 'ngx-datatable-group-header' })\r\nexport class DatatableGroupHeaderDirective {\r\n  /**\r\n   * Row height is required when virtual scroll is enabled.\r\n   */\r\n  @Input() rowHeight: number | ((group?: any, index?: number) => number) = 0;\r\n\r\n  @Input('template')\r\n  _templateInput: TemplateRef<any>;\r\n\r\n  @ContentChild(DatatableGroupHeaderTemplateDirective, { read: TemplateRef, static: true })\r\n  _templateQuery: TemplateRef<any>;\r\n\r\n  get template(): TemplateRef<any> {\r\n    return this._templateInput || this._templateQuery;\r\n  }\r\n\r\n  /**\r\n   * Track toggling of group visibility\r\n   */\r\n  @Output() toggle: EventEmitter<any> = new EventEmitter();\r\n\r\n  /**\r\n   * Toggle the expansion of a group\r\n   */\r\n  toggleExpandGroup(group: any): void {\r\n    this.toggle.emit({\r\n      type: 'group',\r\n      value: group\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Expand all groups\r\n   */\r\n  expandAllGroups(): void {\r\n    this.toggle.emit({\r\n      type: 'all',\r\n      value: true\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Collapse all groups\r\n   */\r\n  collapseAllGroups(): void {\r\n    this.toggle.emit({\r\n      type: 'all',\r\n      value: false\r\n    });\r\n  }\r\n}\r\n","import { TableColumnProp } from '../types/table-column.type';\r\n\r\n// maybe rename this file to prop-getters.ts\r\n\r\nexport type ValueGetter = (obj: any, prop: TableColumnProp) => any;\r\n\r\n/**\r\n * Always returns the empty string ''\r\n */\r\nexport function emptyStringGetter(): string {\r\n  return '';\r\n}\r\n\r\n/**\r\n * Returns the appropriate getter function for this kind of prop.\r\n * If prop == null, returns the emptyStringGetter.\r\n */\r\nexport function getterForProp(prop: TableColumnProp): ValueGetter {\r\n  if (prop == null) {\r\n    return emptyStringGetter;\r\n  }\r\n\r\n  if (typeof prop === 'number') {\r\n    return numericIndexGetter;\r\n  } else {\r\n    // deep or simple\r\n    if (prop.indexOf('.') !== -1) {\r\n      return deepValueGetter;\r\n    } else {\r\n      return shallowValueGetter;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Returns the value at this numeric index.\r\n * @param row array of values\r\n * @param index numeric index\r\n * @returns any or '' if invalid index\r\n */\r\nexport function numericIndexGetter(row: any[], index: number): any {\r\n  if (row == null) {\r\n    return '';\r\n  }\r\n  // mimic behavior of deepValueGetter\r\n  if (!row || index == null) {\r\n    return row;\r\n  }\r\n\r\n  const value = row[index];\r\n  if (value == null) {\r\n    return '';\r\n  }\r\n  return value;\r\n}\r\n\r\n/**\r\n * Returns the value of a field.\r\n * (more efficient than deepValueGetter)\r\n * @param obj object containing the field\r\n * @param fieldName field name string\r\n */\r\nexport function shallowValueGetter(obj: any, fieldName: string): any {\r\n  if (obj == null) {\r\n    return '';\r\n  }\r\n  if (!obj || !fieldName) {\r\n    return obj;\r\n  }\r\n\r\n  const value = obj[fieldName];\r\n  if (value == null) {\r\n    return '';\r\n  }\r\n  return value;\r\n}\r\n\r\n/**\r\n * Returns a deep object given a string. zoo['animal.type']\r\n */\r\nexport function deepValueGetter(obj: any, path: string): any {\r\n  if (obj == null) {\r\n    return '';\r\n  }\r\n  if (!obj || !path) {\r\n    return obj;\r\n  }\r\n\r\n  // check if path matches a root-level field\r\n  // { \"a.b.c\": 123 }\r\n  let current = obj[path];\r\n  if (current !== undefined) {\r\n    return current;\r\n  }\r\n\r\n  current = obj;\r\n  const split = path.split('.');\r\n\r\n  if (split.length) {\r\n    for (let i = 0; i < split.length; i++) {\r\n      current = current[split[i]];\r\n\r\n      // if found undefined, return empty string\r\n      if (current === undefined || current === null) {\r\n        return '';\r\n      }\r\n    }\r\n  }\r\n\r\n  return current;\r\n}\r\n","import { getterForProp } from './column-prop-getters';\r\nimport { TableColumnProp } from '../types/table-column.type';\r\n\r\nexport type OptionalValueGetter = (row: any) => any | undefined;\r\nexport function optionalGetterForProp(prop: TableColumnProp): OptionalValueGetter {\r\n  return prop && (row => getterForProp(prop)(row, prop));\r\n}\r\n\r\n/**\r\n * This functions rearrange items by their parents\r\n * Also sets the level value to each of the items\r\n *\r\n * Note: Expecting each item has a property called parentId\r\n * Note: This algorithm will fail if a list has two or more items with same ID\r\n * NOTE: This algorithm will fail if there is a deadlock of relationship\r\n *\r\n * For example,\r\n *\r\n * Input\r\n *\r\n * id -> parent\r\n * 1  -> 0\r\n * 2  -> 0\r\n * 3  -> 1\r\n * 4  -> 1\r\n * 5  -> 2\r\n * 7  -> 8\r\n * 6  -> 3\r\n *\r\n *\r\n * Output\r\n * id -> level\r\n * 1      -> 0\r\n * --3    -> 1\r\n * ----6  -> 2\r\n * --4    -> 1\r\n * 2      -> 0\r\n * --5    -> 1\r\n * 7     -> 8\r\n *\r\n *\r\n * @param rows\r\n *\r\n */\r\nexport function groupRowsByParents(rows: any[], from?: OptionalValueGetter, to?: OptionalValueGetter): any[] {\r\n  if (from && to) {\r\n    const nodeById = {};\r\n    const l = rows.length;\r\n    let node: TreeNode | null = null;\r\n\r\n    nodeById[0] = new TreeNode(); // that's the root node\r\n\r\n    const uniqIDs = rows.reduce((arr, item) => {\r\n      const toValue = to(item);\r\n      if (arr.indexOf(toValue) === -1) {\r\n        arr.push(toValue);\r\n      }\r\n      return arr;\r\n    }, []);\r\n\r\n    for (let i = 0; i < l; i++) {\r\n      // make TreeNode objects for each item\r\n      nodeById[to(rows[i])] = new TreeNode(rows[i]);\r\n    }\r\n\r\n    for (let i = 0; i < l; i++) {\r\n      // link all TreeNode objects\r\n      node = nodeById[to(rows[i])];\r\n      let parent = 0;\r\n      const fromValue = from(node.row);\r\n      if (!!fromValue && uniqIDs.indexOf(fromValue) > -1) {\r\n        parent = fromValue;\r\n      }\r\n      node.parent = nodeById[parent];\r\n      node.row['level'] = node.parent.row['level'] + 1;\r\n      node.parent.children.push(node);\r\n    }\r\n\r\n    let resolvedRows: any[] = [];\r\n    nodeById[0].flatten(function () {\r\n      resolvedRows = [...resolvedRows, this.row];\r\n    }, true);\r\n\r\n    return resolvedRows;\r\n  } else {\r\n    return rows;\r\n  }\r\n}\r\n\r\nclass TreeNode {\r\n  public row: any;\r\n  public parent: any;\r\n  public children: any[];\r\n\r\n  constructor(row: any | null = null) {\r\n    if (!row) {\r\n      row = {\r\n        level: -1,\r\n        treeStatus: 'expanded'\r\n      };\r\n    }\r\n    this.row = row;\r\n    this.parent = null;\r\n    this.children = [];\r\n  }\r\n\r\n  flatten(f: any, recursive: boolean) {\r\n    if (this.row['treeStatus'] === 'expanded') {\r\n      for (let i = 0, l = this.children.length; i < l; i++) {\r\n        const child = this.children[i];\r\n        f.apply(child, Array.prototype.slice.call(arguments, 2));\r\n        if (recursive) child.flatten.apply(child, arguments);\r\n      }\r\n    }\r\n  }\r\n}\r\n","export enum ColumnMode {\r\n  standard = 'standard',\r\n  flex = 'flex',\r\n  force = 'force'\r\n}\r\n","export enum SelectionType {\r\n  single = 'single',\r\n  multi = 'multi',\r\n  multiClick = 'multiClick',\r\n  cell = 'cell',\r\n  checkbox = 'checkbox'\r\n}\r\n","export enum SortType {\r\n  single = 'single',\r\n  multi = 'multi'\r\n}\r\n","export enum ContextmenuType {\r\n  header = 'header',\r\n  body = 'body'\r\n}\r\n","/**\r\n * Converts strings from something to camel case\r\n * http://stackoverflow.com/questions/10425287/convert-dash-separated-string-to-camelcase\r\n */\r\nexport function camelCase(str: string): string {\r\n  // Replace special characters with a space\r\n  str = str.replace(/[^a-zA-Z0-9 ]/g, ' ');\r\n  // put a space before an uppercase letter\r\n  str = str.replace(/([a-z](?=[A-Z]))/g, '$1 ');\r\n\r\n  // Lower case first character and some other stuff\r\n  str = str\r\n    .replace(/([^a-zA-Z0-9 ])|^[0-9]+/g, '')\r\n    .trim()\r\n    .toLowerCase();\r\n\r\n  // uppercase characters preceded by a space or number\r\n  str = str.replace(/([ 0-9]+)([a-zA-Z])/g, function (a, b, c) {\r\n    return b.trim() + c.toUpperCase();\r\n  });\r\n\r\n  return str;\r\n}\r\n\r\n/**\r\n * Converts strings from camel case to words\r\n * http://stackoverflow.com/questions/7225407/convert-camelcasetext-to-camel-case-text\r\n */\r\nexport function deCamelCase(str: string): string {\r\n  return str.replace(/([A-Z])/g, match => ` ${match}`).replace(/^./, match => match.toUpperCase());\r\n}\r\n","/**\r\n * Creates a unique object id.\r\n * http://stackoverflow.com/questions/6248666/how-to-generate-short-uid-like-ax4j9z-in-js\r\n */\r\nexport function id() {\r\n  return ('0000' + ((Math.random() * Math.pow(36, 4)) << 0).toString(36)).slice(-4);\r\n}\r\n","import { camelCase, deCamelCase } from './camel-case';\r\nimport { id } from './id';\r\nimport { getterForProp } from './column-prop-getters';\r\nimport { TableColumn } from '../types/table-column.type';\r\nimport { DataTableColumnDirective } from '../components/columns/column.directive';\r\n\r\n/**\r\n * Sets the column defaults\r\n */\r\nexport function setColumnDefaults(columns: TableColumn[]) {\r\n  if (!columns) return;\r\n\r\n  // Only one column should hold the tree view\r\n  // Thus if multiple columns are provided with\r\n  // isTreeColumn as true we take only the first one\r\n  let treeColumnFound: boolean = false;\r\n\r\n  for (const column of columns) {\r\n    if (!column.$$id) {\r\n      column.$$id = id();\r\n    }\r\n\r\n    // prop can be numeric; zero is valid not a missing prop\r\n    // translate name => prop\r\n    if (isNullOrUndefined(column.prop) && column.name) {\r\n      column.prop = camelCase(column.name);\r\n    }\r\n\r\n    if (!column.$$valueGetter) {\r\n      column.$$valueGetter = getterForProp(column.prop);\r\n    }\r\n\r\n    // format props if no name passed\r\n    if (!isNullOrUndefined(column.prop) && isNullOrUndefined(column.name)) {\r\n      column.name = deCamelCase(String(column.prop));\r\n    }\r\n\r\n    if (isNullOrUndefined(column.prop) && isNullOrUndefined(column.name)) {\r\n      column.name = ''; // Fixes IE and Edge displaying `null`\r\n    }\r\n\r\n    if (!column.hasOwnProperty('resizeable')) {\r\n      column.resizeable = true;\r\n    }\r\n\r\n    if (!column.hasOwnProperty('sortable')) {\r\n      column.sortable = true;\r\n    }\r\n\r\n    if (!column.hasOwnProperty('draggable')) {\r\n      column.draggable = true;\r\n    }\r\n\r\n    if (!column.hasOwnProperty('canAutoResize')) {\r\n      column.canAutoResize = true;\r\n    }\r\n\r\n    if (!column.hasOwnProperty('width')) {\r\n      column.width = 150;\r\n    }\r\n\r\n    if (!column.hasOwnProperty('isTreeColumn')) {\r\n      column.isTreeColumn = false;\r\n    } else {\r\n      if (column.isTreeColumn && !treeColumnFound) {\r\n        // If the first column with isTreeColumn is true found\r\n        // we mark that treeCoulmn is found\r\n        treeColumnFound = true;\r\n      } else {\r\n        // After that isTreeColumn property for any other column\r\n        // will be set as false\r\n        column.isTreeColumn = false;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function isNullOrUndefined<T>(value: T | null | undefined): value is null | undefined {\r\n  return value === null || value === undefined;\r\n}\r\n\r\n/**\r\n * Translates templates definitions to objects\r\n */\r\nexport function translateTemplates(templates: DataTableColumnDirective[]): any[] {\r\n  const result: any[] = [];\r\n  for (const temp of templates) {\r\n    const col: any = {};\r\n\r\n    const props = Object.getOwnPropertyNames(temp);\r\n    for (const prop of props) {\r\n      col[prop] = temp[prop];\r\n    }\r\n\r\n    if (temp.headerTemplate) {\r\n      col.headerTemplate = temp.headerTemplate;\r\n    }\r\n\r\n    if (temp.cellTemplate) {\r\n      col.cellTemplate = temp.cellTemplate;\r\n    }\r\n\r\n    if (temp.summaryFunc) {\r\n      col.summaryFunc = temp.summaryFunc;\r\n    }\r\n\r\n    if (temp.summaryTemplate) {\r\n      col.summaryTemplate = temp.summaryTemplate;\r\n    }\r\n\r\n    result.push(col);\r\n  }\r\n\r\n  return result;\r\n}\r\n","import { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({ selector: '[ngx-datatable-header-template]' })\r\nexport class DataTableColumnHeaderDirective {\r\n  constructor(public template: TemplateRef<any>) {}\r\n}\r\n","import { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({ selector: '[ngx-datatable-cell-template]' })\r\nexport class DataTableColumnCellDirective {\r\n  constructor(public template: TemplateRef<any>) {}\r\n}\r\n","import { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({ selector: '[ngx-datatable-tree-toggle]' })\r\nexport class DataTableColumnCellTreeToggle {\r\n  constructor(public template: TemplateRef<any>) {}\r\n}\r\n","import { Directive, TemplateRef, ContentChild, Input, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { DataTableColumnHeaderDirective } from './column-header.directive';\r\nimport { DataTableColumnCellDirective } from './column-cell.directive';\r\nimport { DataTableColumnCellTreeToggle } from './tree.directive';\r\nimport { ColumnChangesService } from '../../services/column-changes.service';\r\nimport { TableColumnProp } from '../../types/table-column.type';\r\n\r\n@Directive({ selector: 'ngx-datatable-column' })\r\nexport class DataTableColumnDirective implements OnChanges {\r\n  @Input() name: string;\r\n  @Input() prop: TableColumnProp;\r\n  @Input() frozenLeft: any;\r\n  @Input() frozenRight: any;\r\n  @Input() flexGrow: number;\r\n  @Input() resizeable: boolean;\r\n  @Input() comparator: any;\r\n  @Input() pipe: any;\r\n  @Input() sortable: boolean;\r\n  @Input() draggable: boolean;\r\n  @Input() canAutoResize: boolean;\r\n  @Input() minWidth: number;\r\n  @Input() width: number;\r\n  @Input() maxWidth: number;\r\n  @Input() checkboxable: boolean;\r\n  @Input() headerCheckboxable: boolean;\r\n  @Input() headerClass: string | ((data: any) => string | any);\r\n  @Input() cellClass: string | ((data: any) => string | any);\r\n  @Input() isTreeColumn: boolean;\r\n  @Input() treeLevelIndent: number;\r\n  @Input() summaryFunc: (cells: any[]) => any;\r\n  @Input() summaryTemplate: TemplateRef<any>;\r\n\r\n  @Input('cellTemplate')\r\n  _cellTemplateInput: TemplateRef<any>;\r\n\r\n  @ContentChild(DataTableColumnCellDirective, { read: TemplateRef, static: true })\r\n  _cellTemplateQuery: TemplateRef<any>;\r\n\r\n  get cellTemplate(): TemplateRef<any> {\r\n    return this._cellTemplateInput || this._cellTemplateQuery;\r\n  }\r\n\r\n  @Input('headerTemplate')\r\n  _headerTemplateInput: TemplateRef<any>;\r\n\r\n  @ContentChild(DataTableColumnHeaderDirective, { read: TemplateRef, static: true })\r\n  _headerTemplateQuery: TemplateRef<any>;\r\n\r\n  get headerTemplate(): TemplateRef<any> {\r\n    return this._headerTemplateInput || this._headerTemplateQuery;\r\n  }\r\n\r\n  @Input('treeToggleTemplate')\r\n  _treeToggleTemplateInput: TemplateRef<any>;\r\n\r\n  @ContentChild(DataTableColumnCellTreeToggle, { read: TemplateRef, static: true })\r\n  _treeToggleTemplateQuery: TemplateRef<any>;\r\n\r\n  get treeToggleTemplate(): TemplateRef<any> {\r\n    return this._treeToggleTemplateInput || this._treeToggleTemplateQuery;\r\n  }\r\n\r\n  private isFirstChange = true;\r\n\r\n  constructor(private columnChangesService: ColumnChangesService) {}\r\n\r\n  ngOnChanges() {\r\n    if (this.isFirstChange) {\r\n      this.isFirstChange = false;\r\n    } else {\r\n      this.columnChangesService.onInputChange();\r\n    }\r\n  }\r\n}\r\n","import { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[ngx-datatable-row-detail-template]'\r\n})\r\nexport class DatatableRowDetailTemplateDirective {\r\n  constructor(public template: TemplateRef<any>) {}\r\n}\r\n","import { Input, Output, EventEmitter, Directive, TemplateRef, ContentChild } from '@angular/core';\r\nimport { DatatableRowDetailTemplateDirective } from './row-detail-template.directive';\r\n\r\n@Directive({ selector: 'ngx-datatable-row-detail' })\r\nexport class DatatableRowDetailDirective {\r\n  /**\r\n   * The detail row height is required especially\r\n   * when virtual scroll is enabled.\r\n   */\r\n  @Input() rowHeight: number | ((row?: any, index?: number) => number) = 0;\r\n\r\n  @Input('template')\r\n  _templateInput: TemplateRef<any>;\r\n\r\n  @ContentChild(DatatableRowDetailTemplateDirective, { read: TemplateRef, static: true })\r\n  _templateQuery: TemplateRef<any>;\r\n\r\n  get template(): TemplateRef<any> {\r\n    return this._templateInput || this._templateQuery;\r\n  }\r\n\r\n  /**\r\n   * Row detail row visbility was toggled.\r\n   */\r\n  @Output() toggle: EventEmitter<any> = new EventEmitter();\r\n\r\n  /**\r\n   * Toggle the expansion of the row\r\n   */\r\n  toggleExpandRow(row: any): void {\r\n    this.toggle.emit({\r\n      type: 'row',\r\n      value: row\r\n    });\r\n  }\r\n\r\n  /**\r\n   * API method to expand all the rows.\r\n   */\r\n  expandAllRows(): void {\r\n    this.toggle.emit({\r\n      type: 'all',\r\n      value: true\r\n    });\r\n  }\r\n\r\n  /**\r\n   * API method to collapse all the rows.\r\n   */\r\n  collapseAllRows(): void {\r\n    this.toggle.emit({\r\n      type: 'all',\r\n      value: false\r\n    });\r\n  }\r\n}\r\n","import { Input, Directive, TemplateRef, ContentChild } from '@angular/core';\r\nimport { DataTableFooterTemplateDirective } from './footer-template.directive';\r\n\r\n@Directive({ selector: 'ngx-datatable-footer' })\r\nexport class DatatableFooterDirective {\r\n  @Input() footerHeight: number;\r\n  @Input() totalMessage: string;\r\n  @Input() selectedMessage: string | boolean;\r\n  @Input() pagerLeftArrowIcon: string;\r\n  @Input() pagerRightArrowIcon: string;\r\n  @Input() pagerPreviousIcon: string;\r\n  @Input() pagerNextIcon: string;\r\n\r\n  @Input('template')\r\n  _templateInput: TemplateRef<any>;\r\n\r\n  @ContentChild(DataTableFooterTemplateDirective, { read: TemplateRef })\r\n  _templateQuery: TemplateRef<any>;\r\n\r\n  get template(): TemplateRef<any> {\r\n    return this._templateInput || this._templateQuery;\r\n  }\r\n}\r\n","/**\r\n * Returns the columns by pin.\r\n */\r\nexport function columnsByPin(cols: any[]) {\r\n  const ret: { left: any; center: any; right: any } = {\r\n    left: [],\r\n    center: [],\r\n    right: []\r\n  };\r\n\r\n  if (cols) {\r\n    for (const col of cols) {\r\n      if (col.frozenLeft) {\r\n        ret.left.push(col);\r\n      } else if (col.frozenRight) {\r\n        ret.right.push(col);\r\n      } else {\r\n        ret.center.push(col);\r\n      }\r\n    }\r\n  }\r\n\r\n  return ret;\r\n}\r\n\r\n/**\r\n * Returns the widths of all group sets of a column\r\n */\r\nexport function columnGroupWidths(groups: any, all: any) {\r\n  return {\r\n    left: columnTotalWidth(groups.left),\r\n    center: columnTotalWidth(groups.center),\r\n    right: columnTotalWidth(groups.right),\r\n    total: Math.floor(columnTotalWidth(all))\r\n  };\r\n}\r\n\r\n/**\r\n * Calculates the total width of all columns and their groups\r\n */\r\nexport function columnTotalWidth(columns: any[], prop?: string) {\r\n  let totalWidth = 0;\r\n\r\n  if (columns) {\r\n    for (const c of columns) {\r\n      const has = prop && c[prop];\r\n      const width = has ? c[prop] : c.width;\r\n      totalWidth = totalWidth + parseFloat(width);\r\n    }\r\n  }\r\n\r\n  return totalWidth;\r\n}\r\n\r\n/**\r\n * Calculates the total width of all columns and their groups\r\n */\r\nexport function columnsTotalWidth(columns: any, prop?: any) {\r\n  let totalWidth = 0;\r\n\r\n  for (const column of columns) {\r\n    const has = prop && column[prop];\r\n    totalWidth = totalWidth + (has ? column[prop] : column.width);\r\n  }\r\n\r\n  return totalWidth;\r\n}\r\n\r\nexport function columnsByPinArr(val: any) {\r\n  const colsByPinArr = [];\r\n  const colsByPin = columnsByPin(val);\r\n\r\n  colsByPinArr.push({ type: 'left', columns: colsByPin['left'] });\r\n  colsByPinArr.push({ type: 'center', columns: colsByPin['center'] });\r\n  colsByPinArr.push({ type: 'right', columns: colsByPin['right'] });\r\n\r\n  return colsByPinArr;\r\n}\r\n","/**\r\n * This object contains the cache of the various row heights that are present inside\r\n * the data table.   Its based on Fenwick tree data structure that helps with\r\n * querying sums that have time complexity of log n.\r\n *\r\n * Fenwick Tree Credits: http://petr-mitrichev.blogspot.com/2013/05/fenwick-tree-range-updates.html\r\n * https://github.com/mikolalysenko/fenwick-tree\r\n *\r\n */\r\nexport class RowHeightCache {\r\n  /**\r\n   * Tree Array stores the cumulative information of the row heights to perform efficient\r\n   * range queries and updates.  Currently the tree is initialized to the base row\r\n   * height instead of the detail row height.\r\n   */\r\n  private treeArray: number[] = [];\r\n\r\n  /**\r\n   * Clear the Tree array.\r\n   */\r\n  clearCache(): void {\r\n    this.treeArray = [];\r\n  }\r\n\r\n  /**\r\n   * Initialize the Fenwick tree with row Heights.\r\n   *\r\n   * @param rows The array of rows which contain the expanded status.\r\n   * @param rowHeight The row height.\r\n   * @param detailRowHeight The detail row height.\r\n   */\r\n  initCache(details: any): void {\r\n    const { rows, rowHeight, detailRowHeight, externalVirtual, rowCount, rowIndexes, rowExpansions } = details;\r\n    const isFn = typeof rowHeight === 'function';\r\n    const isDetailFn = typeof detailRowHeight === 'function';\r\n\r\n    if (!isFn && isNaN(rowHeight)) {\r\n      throw new Error(`Row Height cache initialization failed. Please ensure that 'rowHeight' is a\r\n        valid number or function value: (${rowHeight}) when 'scrollbarV' is enabled.`);\r\n    }\r\n\r\n    // Add this additional guard in case detailRowHeight is set to 'auto' as it wont work.\r\n    if (!isDetailFn && isNaN(detailRowHeight)) {\r\n      throw new Error(`Row Height cache initialization failed. Please ensure that 'detailRowHeight' is a\r\n        valid number or function value: (${detailRowHeight}) when 'scrollbarV' is enabled.`);\r\n    }\r\n\r\n    const n = externalVirtual ? rowCount : rows.length;\r\n    this.treeArray = new Array(n);\r\n\r\n    for (let i = 0; i < n; ++i) {\r\n      this.treeArray[i] = 0;\r\n    }\r\n\r\n    for (let i = 0; i < n; ++i) {\r\n      const row = rows[i];\r\n      let currentRowHeight = rowHeight;\r\n      if (isFn) {\r\n        currentRowHeight = rowHeight(row);\r\n      }\r\n\r\n      // Add the detail row height to the already expanded rows.\r\n      // This is useful for the table that goes through a filter or sort.\r\n      const expanded = rowExpansions.has(row);\r\n      if (row && expanded) {\r\n        if (isDetailFn) {\r\n          const index = rowIndexes.get(row);\r\n          currentRowHeight += detailRowHeight(row, index);\r\n        } else {\r\n          currentRowHeight += detailRowHeight;\r\n        }\r\n      }\r\n\r\n      this.update(i, currentRowHeight);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Given the ScrollY position i.e. sum, provide the rowIndex\r\n   * that is present in the current view port.  Below handles edge cases.\r\n   */\r\n  getRowIndex(scrollY: number): number {\r\n    if (scrollY === 0) return 0;\r\n    return this.calcRowIndex(scrollY);\r\n  }\r\n\r\n  /**\r\n   * When a row is expanded or rowHeight is changed, update the height.  This can\r\n   * be utilized in future when Angular Data table supports dynamic row heights.\r\n   */\r\n  update(atRowIndex: number, byRowHeight: number): void {\r\n    if (!this.treeArray.length) {\r\n      throw new Error(`Update at index ${atRowIndex} with value ${byRowHeight} failed:\r\n        Row Height cache not initialized.`);\r\n    }\r\n\r\n    const n = this.treeArray.length;\r\n    atRowIndex |= 0;\r\n\r\n    while (atRowIndex < n) {\r\n      this.treeArray[atRowIndex] += byRowHeight;\r\n      atRowIndex |= atRowIndex + 1;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Range Sum query from 1 to the rowIndex\r\n   */\r\n  query(atIndex: number): number {\r\n    if (!this.treeArray.length) {\r\n      throw new Error(`query at index ${atIndex} failed: Fenwick tree array not initialized.`);\r\n    }\r\n\r\n    let sum = 0;\r\n    atIndex |= 0;\r\n\r\n    while (atIndex >= 0) {\r\n      sum += this.treeArray[atIndex];\r\n      atIndex = (atIndex & (atIndex + 1)) - 1;\r\n    }\r\n\r\n    return sum;\r\n  }\r\n\r\n  /**\r\n   * Find the total height between 2 row indexes\r\n   */\r\n  queryBetween(atIndexA: number, atIndexB: number): number {\r\n    return this.query(atIndexB) - this.query(atIndexA - 1);\r\n  }\r\n\r\n  /**\r\n   * Given the ScrollY position i.e. sum, provide the rowIndex\r\n   * that is present in the current view port.\r\n   */\r\n  private calcRowIndex(sum: number): number {\r\n    if (!this.treeArray.length) return 0;\r\n\r\n    let pos = -1;\r\n    const dataLength = this.treeArray.length;\r\n\r\n    // Get the highest bit for the block size.\r\n    const highestBit = Math.pow(2, dataLength.toString(2).length - 1);\r\n\r\n    for (let blockSize = highestBit; blockSize !== 0; blockSize >>= 1) {\r\n      const nextPos = pos + blockSize;\r\n      if (nextPos < dataLength && sum >= this.treeArray[nextPos]) {\r\n        sum -= this.treeArray[nextPos];\r\n        pos = nextPos;\r\n      }\r\n    }\r\n\r\n    return pos + 1;\r\n  }\r\n}\r\n","import { camelCase } from './camel-case';\r\n\r\nconst cache = {};\r\nconst testStyle = typeof document !== 'undefined' ? document.createElement('div').style : undefined;\r\n\r\n// Get Prefix\r\n// http://davidwalsh.name/vendor-prefix\r\nconst prefix = (function () {\r\n  const styles = typeof window !== 'undefined' ? window.getComputedStyle(document.documentElement, '') : undefined;\r\n  const match =\r\n    typeof styles !== 'undefined'\r\n      ? Array.prototype.slice\r\n          .call(styles)\r\n          .join('')\r\n          .match(/-(moz|webkit|ms)-/)\r\n      : null;\r\n  const pre = match !== null ? match[1] : undefined;\r\n  // tslint:disable-next-line: tsr-detect-non-literal-regexp\r\n  const dom = typeof pre !== 'undefined' ? 'WebKit|Moz|MS|O'.match(new RegExp('(' + pre + ')', 'i'))[1] : undefined;\r\n\r\n  return dom\r\n    ? {\r\n        dom,\r\n        lowercase: pre,\r\n        css: `-${pre}-`,\r\n        js: pre[0].toUpperCase() + pre.substr(1)\r\n      }\r\n    : undefined;\r\n})();\r\n\r\nexport function getVendorPrefixedName(property: string) {\r\n  const name = camelCase(property);\r\n\r\n  if (!cache[name]) {\r\n    if (prefix !== undefined && testStyle[prefix.css + property] !== undefined) {\r\n      cache[name] = prefix.css + property;\r\n    } else if (testStyle[property] !== undefined) {\r\n      cache[name] = property;\r\n    }\r\n  }\r\n\r\n  return cache[name];\r\n}\r\n","import { getVendorPrefixedName } from './prefixes';\r\nimport { camelCase } from './camel-case';\r\n\r\n// browser detection and prefixing tools\r\nconst transform = typeof window !== 'undefined' ? getVendorPrefixedName('transform') : undefined;\r\nconst backfaceVisibility = typeof window !== 'undefined' ? getVendorPrefixedName('backfaceVisibility') : undefined;\r\nconst hasCSSTransforms = typeof window !== 'undefined' ? !!getVendorPrefixedName('transform') : undefined;\r\nconst hasCSS3DTransforms = typeof window !== 'undefined' ? !!getVendorPrefixedName('perspective') : undefined;\r\nconst ua = typeof window !== 'undefined' ? window.navigator.userAgent : 'Chrome';\r\nconst isSafari = /Safari\\//.test(ua) && !/Chrome\\//.test(ua);\r\n\r\nexport function translateXY(styles: any, x: number, y: number) {\r\n  if (typeof transform !== 'undefined' && hasCSSTransforms) {\r\n    if (!isSafari && hasCSS3DTransforms) {\r\n      styles[transform] = `translate3d(${x}px, ${y}px, 0)`;\r\n      styles[backfaceVisibility] = 'hidden';\r\n    } else {\r\n      styles[camelCase(transform)] = `translate(${x}px, ${y}px)`;\r\n    }\r\n  } else {\r\n    styles.top = `${y}px`;\r\n    styles.left = `${x}px`;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Output,\r\n  EventEmitter,\r\n  Input,\r\n  HostBinding,\r\n  ChangeDetectorRef,\r\n  ViewChild,\r\n  OnInit,\r\n  OnDestroy,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\nimport { ScrollerComponent } from './scroller.component';\r\nimport { SelectionType } from '../../types/selection.type';\r\nimport { columnsByPin, columnGroupWidths } from '../../utils/column';\r\nimport { RowHeightCache } from '../../utils/row-height-cache';\r\nimport { translateXY } from '../../utils/translate';\r\n\r\n@Component({\r\n  selector: 'datatable-body',\r\n  template: `\r\n    <datatable-progress *ngIf=\"loadingIndicator\"> </datatable-progress>\r\n    <datatable-selection\r\n      #selector\r\n      [selected]=\"selected\"\r\n      [rows]=\"rows\"\r\n      [selectCheck]=\"selectCheck\"\r\n      [selectEnabled]=\"selectEnabled\"\r\n      [selectionType]=\"selectionType\"\r\n      [rowIdentity]=\"rowIdentity\"\r\n      (select)=\"select.emit($event)\"\r\n      (activate)=\"activate.emit($event)\"\r\n    >\r\n      <datatable-scroller\r\n        *ngIf=\"rows?.length\"\r\n        [scrollbarV]=\"scrollbarV\"\r\n        [scrollbarH]=\"scrollbarH\"\r\n        [scrollHeight]=\"scrollHeight\"\r\n        [scrollWidth]=\"columnGroupWidths?.total\"\r\n        (scroll)=\"onBodyScroll($event)\"\r\n      >\r\n        <datatable-summary-row\r\n          *ngIf=\"summaryRow && summaryPosition === 'top'\"\r\n          [rowHeight]=\"summaryHeight\"\r\n          [offsetX]=\"offsetX\"\r\n          [innerWidth]=\"innerWidth\"\r\n          [rows]=\"rows\"\r\n          [columns]=\"columns\"\r\n        >\r\n        </datatable-summary-row>\r\n        <datatable-row-wrapper\r\n          [groupedRows]=\"groupedRows\"\r\n          *ngFor=\"let group of temp; let i = index; trackBy: rowTrackingFn\"\r\n          [innerWidth]=\"innerWidth\"\r\n          [ngStyle]=\"getRowsStyles(group)\"\r\n          [rowDetail]=\"rowDetail\"\r\n          [groupHeader]=\"groupHeader\"\r\n          [offsetX]=\"offsetX\"\r\n          [detailRowHeight]=\"getDetailRowHeight(group && group[i], i)\"\r\n          [row]=\"group\"\r\n          [expanded]=\"getRowExpanded(group)\"\r\n          [rowIndex]=\"getRowIndex(group && group[i])\"\r\n          (rowContextmenu)=\"rowContextmenu.emit($event)\"\r\n        >\r\n          <datatable-body-row\r\n            role=\"row\"\r\n            *ngIf=\"!groupedRows; else groupedRowsTemplate\"\r\n            tabindex=\"-1\"\r\n            [isSelected]=\"selector.getRowSelected(group)\"\r\n            [innerWidth]=\"innerWidth\"\r\n            [offsetX]=\"offsetX\"\r\n            [columns]=\"columns\"\r\n            [rowHeight]=\"getRowHeight(group)\"\r\n            [row]=\"group\"\r\n            [rowIndex]=\"getRowIndex(group)\"\r\n            [expanded]=\"getRowExpanded(group)\"\r\n            [rowClass]=\"rowClass\"\r\n            [selectCheck]=\"selectCheck\"\r\n            [displayCheck]=\"displayCheck\"\r\n            [treeStatus]=\"group && group.treeStatus\"\r\n            (treeAction)=\"onTreeAction(group)\"\r\n            (activate)=\"selector.onActivate($event, indexes.first + i)\"\r\n          >\r\n          </datatable-body-row>\r\n          <ng-template #groupedRowsTemplate>\r\n            <datatable-body-row\r\n              role=\"row\"\r\n              *ngFor=\"let row of group.value; let i = index; trackBy: rowTrackingFn\"\r\n              tabindex=\"-1\"\r\n              [isSelected]=\"selector.getRowSelected(row)\"\r\n              [innerWidth]=\"innerWidth\"\r\n              [offsetX]=\"offsetX\"\r\n              [columns]=\"columns\"\r\n              [rowHeight]=\"getRowHeight(row)\"\r\n              [row]=\"row\"\r\n              [group]=\"group.value\"\r\n              [rowIndex]=\"getRowIndex(row)\"\r\n              [expanded]=\"getRowExpanded(row)\"\r\n              [rowClass]=\"rowClass\"\r\n              [treeStatus]=\"row.treeStatus\"\r\n              (treeAction)=\"onTreeAction(row)\"\r\n              (activate)=\"selector.onActivate($event, i)\"\r\n            >\r\n            </datatable-body-row>\r\n          </ng-template>\r\n        </datatable-row-wrapper>\r\n        <datatable-summary-row\r\n          role=\"row\"\r\n          *ngIf=\"summaryRow && summaryPosition === 'bottom'\"\r\n          [ngStyle]=\"getBottomSummaryRowStyles()\"\r\n          [rowHeight]=\"summaryHeight\"\r\n          [offsetX]=\"offsetX\"\r\n          [innerWidth]=\"innerWidth\"\r\n          [rows]=\"rows\"\r\n          [columns]=\"columns\"\r\n        >\r\n        </datatable-summary-row>\r\n      </datatable-scroller>\r\n      <div class=\"empty-row\" *ngIf=\"!rows?.length && !loadingIndicator\" [innerHTML]=\"emptyMessage\"></div>\r\n    </datatable-selection>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  host: {\r\n    class: 'datatable-body'\r\n  }\r\n})\r\nexport class DataTableBodyComponent implements OnInit, OnDestroy {\r\n  @Input() scrollbarV: boolean;\r\n  @Input() scrollbarH: boolean;\r\n  @Input() loadingIndicator: boolean;\r\n  @Input() externalPaging: boolean;\r\n  @Input() rowHeight: number | 'auto' | ((row?: any) => number);\r\n  @Input() offsetX: number;\r\n  @Input() emptyMessage: string;\r\n  @Input() selectionType: SelectionType;\r\n  @Input() selected: any[] = [];\r\n  @Input() rowIdentity: any;\r\n  @Input() rowDetail: any;\r\n  @Input('groupHeader') set setGroupHeader(groupHeader) {\r\n    this.groupHeader = groupHeader;\r\n    if (this.groupHeader && !this.listener) {\r\n      this.setGroupHeaderListener();\r\n    }\r\n  }\r\n  @Input() selectCheck: any;\r\n  @Input() displayCheck: any;\r\n  @Input() trackByProp: string;\r\n  @Input() rowClass: any;\r\n  @Input() groupedRows: any;\r\n  @Input() groupExpansionDefault: boolean;\r\n  @Input() innerWidth: number;\r\n  @Input() groupRowsBy: string;\r\n  @Input() virtualization: boolean;\r\n  @Input() summaryRow: boolean;\r\n  @Input() summaryPosition: string;\r\n  @Input() summaryHeight: number;\r\n\r\n  @Input() set pageSize(val: number) {\r\n    this._pageSize = val;\r\n    this.recalcLayout();\r\n  }\r\n\r\n  get pageSize(): number {\r\n    return this._pageSize;\r\n  }\r\n\r\n  @Input() set rows(val: any[]) {\r\n    this._rows = val;\r\n    this.recalcLayout();\r\n  }\r\n\r\n  get rows(): any[] {\r\n    return this._rows;\r\n  }\r\n\r\n  @Input() set columns(val: any[]) {\r\n    this._columns = val;\r\n    const colsByPin = columnsByPin(val);\r\n    this.columnGroupWidths = columnGroupWidths(colsByPin, val);\r\n  }\r\n\r\n  get columns(): any[] {\r\n    return this._columns;\r\n  }\r\n\r\n  @Input() set offset(val: number) {\r\n    this._offset = val;\r\n    if (!this.scrollbarV || (this.scrollbarV && !this.virtualization)) this.recalcLayout();\r\n  }\r\n\r\n  get offset(): number {\r\n    return this._offset;\r\n  }\r\n\r\n  @Input() set rowCount(val: number) {\r\n    this._rowCount = val;\r\n    this.recalcLayout();\r\n  }\r\n\r\n  get rowCount(): number {\r\n    return this._rowCount;\r\n  }\r\n\r\n  @HostBinding('style.width')\r\n  get bodyWidth(): string {\r\n    if (this.scrollbarH) {\r\n      return this.innerWidth + 'px';\r\n    } else {\r\n      return '100%';\r\n    }\r\n  }\r\n\r\n  @Input()\r\n  @HostBinding('style.height')\r\n  set bodyHeight(val) {\r\n    if (this.scrollbarV) {\r\n      this._bodyHeight = val + 'px';\r\n    } else {\r\n      this._bodyHeight = 'auto';\r\n    }\r\n\r\n    this.recalcLayout();\r\n  }\r\n\r\n  get bodyHeight() {\r\n    return this._bodyHeight;\r\n  }\r\n\r\n  @Output() scroll: EventEmitter<any> = new EventEmitter();\r\n  @Output() page: EventEmitter<any> = new EventEmitter();\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() select: EventEmitter<any> = new EventEmitter();\r\n  @Output() detailToggle: EventEmitter<any> = new EventEmitter();\r\n  @Output() rowContextmenu = new EventEmitter<{ event: MouseEvent; row: any }>(false);\r\n  @Output() treeAction: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ViewChild(ScrollerComponent) scroller: ScrollerComponent;\r\n\r\n  /**\r\n   * Returns if selection is enabled.\r\n   */\r\n  get selectEnabled(): boolean {\r\n    return !!this.selectionType;\r\n  }\r\n\r\n  /**\r\n   * Property that would calculate the height of scroll bar\r\n   * based on the row heights cache for virtual scroll and virtualization. Other scenarios\r\n   * calculate scroll height automatically (as height will be undefined).\r\n   */\r\n  get scrollHeight(): number | undefined {\r\n    if (this.scrollbarV && this.virtualization && this.rowCount) {\r\n      return this.rowHeightsCache.query(this.rowCount - 1);\r\n    }\r\n    // avoid TS7030: Not all code paths return a value.\r\n    return undefined;\r\n  }\r\n\r\n  rowHeightsCache: RowHeightCache = new RowHeightCache();\r\n  temp: any[] = [];\r\n  offsetY = 0;\r\n  indexes: any = {};\r\n  columnGroupWidths: any;\r\n  columnGroupWidthsWithoutGroup: any;\r\n  rowTrackingFn: any;\r\n  listener: any;\r\n  rowIndexes: any = new WeakMap<any, string>();\r\n  rowExpansions: any[] = [];\r\n  isAllGroupCollapsed: boolean;\r\n\r\n  _rows: any[];\r\n  _bodyHeight: any;\r\n  _columns: any[];\r\n  _rowCount: number;\r\n  _offset: number;\r\n  _pageSize: number;\r\n  groupHeader: any;\r\n\r\n  /**\r\n   * Creates an instance of DataTableBodyComponent.\r\n   */\r\n  constructor(private cd: ChangeDetectorRef) {\r\n    // declare fn here so we can get access to the `this` property\r\n    this.rowTrackingFn = (index: number, row: any): any => {\r\n      const idx = this.getRowIndex(row);\r\n      if (this.trackByProp) {\r\n        return row[this.trackByProp];\r\n      } else {\r\n        return idx;\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Called after the constructor, initializing input properties\r\n   */\r\n  ngOnInit(): void {\r\n    if (this.rowDetail) {\r\n      this.listener = this.rowDetail.toggle.subscribe(({ type, value }: { type: string; value: any }) => {\r\n        if (type === 'row') {\r\n          this.toggleRowExpansion(value);\r\n        }\r\n        if (type === 'all') {\r\n          this.toggleAllRows(value);\r\n        }\r\n\r\n        // Refresh rows after toggle\r\n        // Fixes #883\r\n        this.updateIndexes();\r\n        this.updateRows();\r\n        this.cd.markForCheck();\r\n      });\r\n    }\r\n\r\n    if (this.groupHeader) {\r\n      this.setGroupHeaderListener();\r\n    }\r\n  }\r\n\r\n  setGroupHeaderListener() {\r\n    this.listener = this.groupHeader.toggle.subscribe(({ type, value }: { type: string; value: any }) => {\r\n      if (type === 'group') {\r\n        this.toggleRowExpansion(value);\r\n      }\r\n      if (type === 'all') {\r\n        this.toggleAllRows(value);\r\n      }\r\n\r\n      // Refresh rows after toggle\r\n      // Fixes #883\r\n      this.updateIndexes();\r\n      this.updateRows();\r\n      this.cd.markForCheck();\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n   * Called once, before the instance is destroyed.\r\n   */\r\n  ngOnDestroy(): void {\r\n    if ((this.rowDetail || this.groupHeader) && this.listener) {\r\n      this.listener.unsubscribe();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the Y offset given a new offset.\r\n   */\r\n  updateOffsetY(offset?: number): void {\r\n    // scroller is missing on empty table\r\n    if (!this.scroller) {\r\n      return;\r\n    }\r\n\r\n    if (this.scrollbarV && this.virtualization && offset) {\r\n      // First get the row Index that we need to move to.\r\n      const rowIndex = this.pageSize * offset;\r\n      offset = this.rowHeightsCache.query(rowIndex - 1);\r\n    } else if (this.scrollbarV && !this.virtualization) {\r\n      offset = 0;\r\n    }\r\n\r\n    this.scroller.setOffset(offset || 0);\r\n  }\r\n\r\n  /**\r\n   * Body was scrolled, this is mainly useful for\r\n   * when a user is server-side pagination via virtual scroll.\r\n   */\r\n  onBodyScroll(event: any): void {\r\n    const scrollYPos: number = event.scrollYPos;\r\n    const scrollXPos: number = event.scrollXPos;\r\n\r\n    // if scroll change, trigger update\r\n    // this is mainly used for header cell positions\r\n    if (this.offsetY !== scrollYPos || this.offsetX !== scrollXPos) {\r\n      this.scroll.emit({\r\n        offsetY: scrollYPos,\r\n        offsetX: scrollXPos\r\n      });\r\n    }\r\n\r\n    this.offsetY = scrollYPos;\r\n    this.offsetX = scrollXPos;\r\n\r\n    this.updateIndexes();\r\n    this.updatePage(event.direction);\r\n    this.updateRows();\r\n  }\r\n\r\n  /**\r\n   * Updates the page given a direction.\r\n   */\r\n  updatePage(direction: string): void {\r\n    let offset = this.indexes.first / this.pageSize;\r\n\r\n    if (direction === 'up') {\r\n      offset = Math.ceil(offset);\r\n    } else if (direction === 'down') {\r\n      offset = Math.floor(offset);\r\n    }\r\n\r\n    if (direction !== undefined && !isNaN(offset)) {\r\n      this.page.emit({ offset });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the rows in the view port\r\n   */\r\n  updateRows(): void {\r\n    const { first, last } = this.indexes;\r\n    let rowIndex = first;\r\n    let idx = 0;\r\n    const temp: any[] = [];\r\n\r\n    // if grouprowsby has been specified treat row paging\r\n    // parameters as group paging parameters ie if limit 10 has been\r\n    // specified treat it as 10 groups rather than 10 rows\r\n    if (this.groupedRows) {\r\n      let maxRowsPerGroup = 3;\r\n      // if there is only one group set the maximum number of\r\n      // rows per group the same as the total number of rows\r\n      if (this.groupedRows.length === 1) {\r\n        maxRowsPerGroup = this.groupedRows[0].value.length;\r\n      }\r\n\r\n      while (rowIndex < last && rowIndex < this.groupedRows.length) {\r\n        // Add the groups into this page\r\n        const group = this.groupedRows[rowIndex];\r\n        this.rowIndexes.set(group, rowIndex);\r\n\r\n        if (group.value) {\r\n          // add indexes for each group item\r\n          group.value.forEach((g: any, i: number) => {\r\n            const _idx = `${rowIndex}-${i}`;\r\n            this.rowIndexes.set(g, _idx);\r\n          });\r\n        }\r\n        temp[idx] = group;\r\n        idx++;\r\n\r\n        // Group index in this context\r\n        rowIndex++;\r\n      }\r\n    } else {\r\n      while (rowIndex < last && rowIndex < this.rowCount) {\r\n        const row = this.rows[rowIndex];\r\n\r\n        if (row) {\r\n          // add indexes for each row\r\n          this.rowIndexes.set(row, rowIndex);\r\n          temp[idx] = row;\r\n        }\r\n\r\n        idx++;\r\n        rowIndex++;\r\n      }\r\n    }\r\n\r\n    this.temp = temp;\r\n  }\r\n\r\n  /**\r\n   * Get the row height\r\n   */\r\n  getRowHeight(row: any): number {\r\n    // if its a function return it\r\n    if (typeof this.rowHeight === 'function') {\r\n      return this.rowHeight(row);\r\n    }\r\n\r\n    return this.rowHeight as number;\r\n  }\r\n\r\n  /**\r\n   * @param group the group with all rows\r\n   */\r\n  getGroupHeight(group: any): number {\r\n    let rowHeight = 0;\r\n\r\n    if (group.value) {\r\n      for (let index = 0; index < group.value.length; index++) {\r\n        rowHeight += this.getRowAndDetailHeight(group.value[index]);\r\n      }\r\n    }\r\n\r\n    return rowHeight;\r\n  }\r\n\r\n  /**\r\n   * Calculate row height based on the expanded state of the row.\r\n   */\r\n  getRowAndDetailHeight(row: any): number {\r\n    let rowHeight = this.getRowHeight(row);\r\n    const expanded = this.getRowExpanded(row);\r\n\r\n    // Adding detail row height if its expanded.\r\n    if (expanded) {\r\n      rowHeight += this.getDetailRowHeight(row);\r\n    }\r\n\r\n    return rowHeight;\r\n  }\r\n\r\n  /**\r\n   * Get the height of the detail row.\r\n   */\r\n  getDetailRowHeight = (row?: any, index?: any): number => {\r\n    if (!this.rowDetail) {\r\n      return 0;\r\n    }\r\n    const rowHeight = this.rowDetail.rowHeight;\r\n    return typeof rowHeight === 'function' ? rowHeight(row, index) : (rowHeight as number);\r\n  };\r\n\r\n  /**\r\n   * Calculates the styles for the row so that the rows can be moved in 2D space\r\n   * during virtual scroll inside the DOM.   In the below case the Y position is\r\n   * manipulated.   As an example, if the height of row 0 is 30 px and row 1 is\r\n   * 100 px then following styles are generated:\r\n   *\r\n   * transform: translate3d(0px, 0px, 0px);    ->  row0\r\n   * transform: translate3d(0px, 30px, 0px);   ->  row1\r\n   * transform: translate3d(0px, 130px, 0px);  ->  row2\r\n   *\r\n   * Row heights have to be calculated based on the row heights cache as we wont\r\n   * be able to determine which row is of what height before hand.  In the above\r\n   * case the positionY of the translate3d for row2 would be the sum of all the\r\n   * heights of the rows before it (i.e. row0 and row1).\r\n   *\r\n   * @param rows the row that needs to be placed in the 2D space.\r\n   * @returns the CSS3 style to be applied\r\n   *\r\n   * @memberOf DataTableBodyComponent\r\n   */\r\n  getRowsStyles(rows: any): any {\r\n    const styles: any = {};\r\n\r\n    // only add styles for the group if there is a group\r\n    if (this.groupedRows) {\r\n      styles.width = this.columnGroupWidths.total;\r\n    }\r\n\r\n    if (this.scrollbarV && this.virtualization) {\r\n      let idx = 0;\r\n\r\n      if (this.groupedRows) {\r\n        // Get the latest row rowindex in a group\r\n        const row = rows[rows.length - 1];\r\n        idx = row ? this.getRowIndex(row) : 0;\r\n      } else {\r\n        idx = this.getRowIndex(rows);\r\n      }\r\n\r\n      // const pos = idx * rowHeight;\r\n      // The position of this row would be the sum of all row heights\r\n      // until the previous row position.\r\n      const pos = this.rowHeightsCache.query(idx - 1);\r\n\r\n      translateXY(styles, 0, pos);\r\n    }\r\n\r\n    return styles;\r\n  }\r\n\r\n  /**\r\n   * Calculate bottom summary row offset for scrollbar mode.\r\n   * For more information about cache and offset calculation\r\n   * see description for `getRowsStyles` method\r\n   *\r\n   * @returns the CSS3 style to be applied\r\n   *\r\n   * @memberOf DataTableBodyComponent\r\n   */\r\n  getBottomSummaryRowStyles(): any {\r\n    if (!this.scrollbarV || !this.rows || !this.rows.length) {\r\n      return null;\r\n    }\r\n\r\n    const styles = { position: 'absolute' };\r\n    const pos = this.rowHeightsCache.query(this.rows.length - 1);\r\n\r\n    translateXY(styles, 0, pos);\r\n\r\n    return styles;\r\n  }\r\n\r\n  /**\r\n   * Hides the loading indicator\r\n   */\r\n  hideIndicator(): void {\r\n    setTimeout(() => (this.loadingIndicator = false), 500);\r\n  }\r\n\r\n  /**\r\n   * Updates the index of the rows in the viewport\r\n   */\r\n  updateIndexes(): void {\r\n    let first = 0;\r\n    let last = 0;\r\n\r\n    if (this.scrollbarV) {\r\n      if (this.virtualization) {\r\n        // Calculation of the first and last indexes will be based on where the\r\n        // scrollY position would be at.  The last index would be the one\r\n        // that shows up inside the view port the last.\r\n        const height = parseInt(this.bodyHeight, 0);\r\n        first = this.rowHeightsCache.getRowIndex(this.offsetY);\r\n        last = this.rowHeightsCache.getRowIndex(height + this.offsetY) + 1;\r\n      } else {\r\n        // If virtual rows are not needed\r\n        // We render all in one go\r\n        first = 0;\r\n        last = this.rowCount;\r\n      }\r\n    } else {\r\n      // The server is handling paging and will pass an array that begins with the\r\n      // element at a specified offset.  first should always be 0 with external paging.\r\n      if (!this.externalPaging) {\r\n        first = Math.max(this.offset * this.pageSize, 0);\r\n      }\r\n      last = Math.min(first + this.pageSize, this.rowCount);\r\n    }\r\n\r\n    this.indexes = { first, last };\r\n  }\r\n\r\n  /**\r\n   * Refreshes the full Row Height cache.  Should be used\r\n   * when the entire row array state has changed.\r\n   */\r\n  refreshRowHeightCache(): void {\r\n    if (!this.scrollbarV || (this.scrollbarV && !this.virtualization)) {\r\n      return;\r\n    }\r\n\r\n    // clear the previous row height cache if already present.\r\n    // this is useful during sorts, filters where the state of the\r\n    // rows array is changed.\r\n    this.rowHeightsCache.clearCache();\r\n\r\n    // Initialize the tree only if there are rows inside the tree.\r\n    if (this.rows && this.rows.length) {\r\n      const rowExpansions = new Set();\r\n      for (const row of this.rows) {\r\n        if (this.getRowExpanded(row)) {\r\n          rowExpansions.add(row);\r\n        }\r\n      }\r\n\r\n      this.rowHeightsCache.initCache({\r\n        rows: this.rows,\r\n        rowHeight: this.rowHeight,\r\n        detailRowHeight: this.getDetailRowHeight,\r\n        externalVirtual: this.scrollbarV && this.externalPaging,\r\n        rowCount: this.rowCount,\r\n        rowIndexes: this.rowIndexes,\r\n        rowExpansions\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the index for the view port\r\n   */\r\n  getAdjustedViewPortIndex(): number {\r\n    // Capture the row index of the first row that is visible on the viewport.\r\n    // If the scroll bar is just below the row which is highlighted then make that as the\r\n    // first index.\r\n    const viewPortFirstRowIndex = this.indexes.first;\r\n\r\n    if (this.scrollbarV && this.virtualization) {\r\n      const offsetScroll = this.rowHeightsCache.query(viewPortFirstRowIndex - 1);\r\n      return offsetScroll <= this.offsetY ? viewPortFirstRowIndex - 1 : viewPortFirstRowIndex;\r\n    }\r\n\r\n    return viewPortFirstRowIndex;\r\n  }\r\n\r\n  /**\r\n   * Toggle the Expansion of the row i.e. if the row is expanded then it will\r\n   * collapse and vice versa.   Note that the expanded status is stored as\r\n   * a part of the row object itself as we have to preserve the expanded row\r\n   * status in case of sorting and filtering of the row set.\r\n   */\r\n  toggleRowExpansion(row: any): void {\r\n    // Capture the row index of the first row that is visible on the viewport.\r\n    const viewPortFirstRowIndex = this.getAdjustedViewPortIndex();\r\n    const rowExpandedIdx = this.getRowExpandedIdx(row, this.rowExpansions);\r\n    const expanded = rowExpandedIdx > -1;\r\n\r\n    // If the detailRowHeight is auto --> only in case of non-virtualized scroll\r\n    if (this.scrollbarV && this.virtualization) {\r\n      const detailRowHeight = this.getDetailRowHeight(row) * (expanded ? -1 : 1);\r\n      // const idx = this.rowIndexes.get(row) || 0;\r\n      const idx = this.getRowIndex(row);\r\n      this.rowHeightsCache.update(idx, detailRowHeight);\r\n    }\r\n\r\n    // Update the toggled row and update thive nevere heights in the cache.\r\n    if (expanded) {\r\n      this.rowExpansions.splice(rowExpandedIdx, 1);\r\n    } else {\r\n      this.rowExpansions.push(row);\r\n    }\r\n\r\n    this.isAllGroupCollapsed = this.rowExpansions.length === 0;\r\n\r\n    this.detailToggle.emit({\r\n      rows: [row],\r\n      currentIndex: viewPortFirstRowIndex\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Expand/Collapse all the rows no matter what their state is.\r\n   */\r\n  toggleAllRows(expanded: boolean): void {\r\n    // clear prev expansions\r\n    this.rowExpansions = [];\r\n\r\n    // Capture the row index of the first row that is visible on the viewport.\r\n    const viewPortFirstRowIndex = this.getAdjustedViewPortIndex();\r\n\r\n    if (expanded) {\r\n      for (const row of this.rows) {\r\n        this.rowExpansions.push(row);\r\n      }\r\n    }\r\n\r\n    if (this.scrollbarV) {\r\n      // Refresh the full row heights cache since every row was affected.\r\n      this.recalcLayout();\r\n    }\r\n\r\n    // Emit all rows that have been expanded.\r\n    this.detailToggle.emit({\r\n      rows: this.rows,\r\n      currentIndex: viewPortFirstRowIndex\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Recalculates the table\r\n   */\r\n  recalcLayout(): void {\r\n    this.refreshRowHeightCache();\r\n    this.updateIndexes();\r\n    this.updateRows();\r\n  }\r\n\r\n  /**\r\n   * Tracks the column\r\n   */\r\n  columnTrackingFn(index: number, column: any): any {\r\n    return column.$$id;\r\n  }\r\n\r\n  /**\r\n   * Gets the row pinning group styles\r\n   */\r\n  stylesByGroup(group: string) {\r\n    const widths = this.columnGroupWidths;\r\n    const offsetX = this.offsetX;\r\n\r\n    const styles = {\r\n      width: `${widths[group]}px`\r\n    };\r\n\r\n    if (group === 'left') {\r\n      translateXY(styles, offsetX, 0);\r\n    } else if (group === 'right') {\r\n      const bodyWidth = parseInt(this.innerWidth + '', 0);\r\n      const totalDiff = widths.total - bodyWidth;\r\n      const offsetDiff = totalDiff - offsetX;\r\n      const offset = offsetDiff * -1;\r\n      translateXY(styles, offset, 0);\r\n    }\r\n\r\n    return styles;\r\n  }\r\n\r\n  /**\r\n   * Returns if the row was expanded and set default row expansion when row expansion is empty\r\n   */\r\n  getRowExpanded(row: any): boolean {\r\n    if (this.rowExpansions.length === 0 && this.groupExpansionDefault && !this.isAllGroupCollapsed) {\r\n      for (const group of this.groupedRows) {\r\n        this.rowExpansions.push(group);\r\n      }\r\n    }\r\n\r\n    return this.getRowExpandedIdx(row, this.rowExpansions) > -1;\r\n  }\r\n\r\n  getRowExpandedIdx(row: any, expanded: any[]): number {\r\n    if (!expanded || !expanded.length) return -1;\r\n\r\n    const rowId = this.rowIdentity(row);\r\n    return expanded.findIndex(r => {\r\n      const id = this.rowIdentity(r);\r\n      return id === rowId;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Gets the row index given a row\r\n   */\r\n  getRowIndex(row: any): number {\r\n    return this.rowIndexes.get(row) || 0;\r\n  }\r\n\r\n  onTreeAction(row: any) {\r\n    this.treeAction.emit({ row });\r\n  }\r\n}\r\n","export enum SortDirection {\r\n  asc = 'asc',\r\n  desc = 'desc'\r\n}\r\n","import {\r\n  Component,\r\n  Output,\r\n  EventEmitter,\r\n  Input,\r\n  HostBinding,\r\n  ChangeDetectorRef,\r\n  ChangeDetectionStrategy,\r\n  OnDestroy\r\n} from '@angular/core';\r\nimport { columnsByPin, columnGroupWidths, columnsByPinArr } from '../../utils/column';\r\nimport { SortType } from '../../types/sort.type';\r\nimport { SelectionType } from '../../types/selection.type';\r\nimport { DataTableColumnDirective } from '../columns/column.directive';\r\nimport { translateXY } from '../../utils/translate';\r\n\r\n@Component({\r\n  selector: 'datatable-header',\r\n  template: `\r\n    <div\r\n      role=\"row\"\r\n      orderable\r\n      (reorder)=\"onColumnReordered($event)\"\r\n      (targetChanged)=\"onTargetChanged($event)\"\r\n      [style.width.px]=\"_columnGroupWidths.total\"\r\n      class=\"datatable-header-inner\"\r\n    >\r\n      <div\r\n        *ngFor=\"let colGroup of _columnsByPin; trackBy: trackByGroups\"\r\n        [class]=\"'datatable-row-' + colGroup.type\"\r\n        [ngStyle]=\"_styleByGroup[colGroup.type]\"\r\n      >\r\n        <datatable-header-cell\r\n          role=\"columnheader\"\r\n          *ngFor=\"let column of colGroup.columns; trackBy: columnTrackingFn\"\r\n          resizeable\r\n          [resizeEnabled]=\"column.resizeable\"\r\n          (resize)=\"onColumnResized($event, column)\"\r\n          long-press\r\n          [pressModel]=\"column\"\r\n          [pressEnabled]=\"reorderable && column.draggable\"\r\n          (longPressStart)=\"onLongPressStart($event)\"\r\n          (longPressEnd)=\"onLongPressEnd($event)\"\r\n          draggable\r\n          [dragX]=\"reorderable && column.draggable && column.dragging\"\r\n          [dragY]=\"false\"\r\n          [dragModel]=\"column\"\r\n          [dragEventTarget]=\"dragEventTarget\"\r\n          [headerHeight]=\"headerHeight\"\r\n          [isTarget]=\"column.isTarget\"\r\n          [targetMarkerTemplate]=\"targetMarkerTemplate\"\r\n          [targetMarkerContext]=\"column.targetMarkerContext\"\r\n          [column]=\"column\"\r\n          [sortType]=\"sortType\"\r\n          [sorts]=\"sorts\"\r\n          [selectionType]=\"selectionType\"\r\n          [sortAscendingIcon]=\"sortAscendingIcon\"\r\n          [sortDescendingIcon]=\"sortDescendingIcon\"\r\n          [sortUnsetIcon]=\"sortUnsetIcon\"\r\n          [allRowsSelected]=\"allRowsSelected\"\r\n          (sort)=\"onSort($event)\"\r\n          (select)=\"select.emit($event)\"\r\n          (columnContextmenu)=\"columnContextmenu.emit($event)\"\r\n        >\r\n        </datatable-header-cell>\r\n      </div>\r\n    </div>\r\n  `,\r\n  host: {\r\n    class: 'datatable-header'\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DataTableHeaderComponent implements OnDestroy {\r\n  @Input() sortAscendingIcon: any;\r\n  @Input() sortDescendingIcon: any;\r\n  @Input() sortUnsetIcon: any;\r\n  @Input() scrollbarH: boolean;\r\n  @Input() dealsWithGroup: boolean;\r\n  @Input() targetMarkerTemplate: any;\r\n\r\n  targetMarkerContext: any;\r\n\r\n  @Input() set innerWidth(val: number) {\r\n    this._innerWidth = val;\r\n    setTimeout(() => {\r\n      if (this._columns) {\r\n        const colByPin = columnsByPin(this._columns);\r\n        this._columnGroupWidths = columnGroupWidths(colByPin, this._columns);\r\n        this.setStylesByGroup();\r\n      }\r\n    });\r\n  }\r\n\r\n  get innerWidth(): number {\r\n    return this._innerWidth;\r\n  }\r\n\r\n  @Input() sorts: any[];\r\n  @Input() sortType: SortType;\r\n  @Input() allRowsSelected: boolean;\r\n  @Input() selectionType: SelectionType;\r\n  @Input() reorderable: boolean;\r\n\r\n  dragEventTarget: any;\r\n\r\n  @HostBinding('style.height')\r\n  @Input()\r\n  set headerHeight(val: any) {\r\n    if (val !== 'auto') {\r\n      this._headerHeight = `${val}px`;\r\n    } else {\r\n      this._headerHeight = val;\r\n    }\r\n  }\r\n\r\n  get headerHeight(): any {\r\n    return this._headerHeight;\r\n  }\r\n\r\n  @Input() set columns(val: any[]) {\r\n    this._columns = val;\r\n\r\n    const colsByPin = columnsByPin(val);\r\n    this._columnsByPin = columnsByPinArr(val);\r\n    setTimeout(() => {\r\n      this._columnGroupWidths = columnGroupWidths(colsByPin, val);\r\n      this.setStylesByGroup();\r\n    });\r\n  }\r\n\r\n  get columns(): any[] {\r\n    return this._columns;\r\n  }\r\n\r\n  @Input()\r\n  set offsetX(val: number) {\r\n    this._offsetX = val;\r\n    this.setStylesByGroup();\r\n  }\r\n  get offsetX() {\r\n    return this._offsetX;\r\n  }\r\n\r\n  @Output() sort: EventEmitter<any> = new EventEmitter();\r\n  @Output() reorder: EventEmitter<any> = new EventEmitter();\r\n  @Output() resize: EventEmitter<any> = new EventEmitter();\r\n  @Output() select: EventEmitter<any> = new EventEmitter();\r\n  @Output() columnContextmenu = new EventEmitter<{ event: MouseEvent; column: any }>(false);\r\n\r\n  _columnsByPin: any;\r\n  _columnGroupWidths: any = {\r\n    total: 100\r\n  };\r\n  _innerWidth: number;\r\n  _offsetX: number;\r\n  _columns: any[];\r\n  _headerHeight: string;\r\n  _styleByGroup: { [prop: string]: {} } = {\r\n    left: {},\r\n    center: {},\r\n    right: {}\r\n  };\r\n\r\n  private destroyed = false;\r\n\r\n  constructor(private cd: ChangeDetectorRef) {}\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroyed = true;\r\n  }\r\n\r\n  onLongPressStart({ event, model }: { event: any; model: any }) {\r\n    model.dragging = true;\r\n    this.dragEventTarget = event;\r\n  }\r\n\r\n  onLongPressEnd({ event, model }: { event: any; model: any }) {\r\n    this.dragEventTarget = event;\r\n\r\n    // delay resetting so sort can be\r\n    // prevented if we were dragging\r\n    setTimeout(() => {\r\n      // datatable component creates copies from columns on reorder\r\n      // set dragging to false on new objects\r\n      const column = this._columns.find(c => c.$$id === model.$$id);\r\n      if (column) {\r\n        column.dragging = false;\r\n      }\r\n    }, 5);\r\n  }\r\n\r\n  @HostBinding('style.width')\r\n  get headerWidth(): string {\r\n    if (this.scrollbarH) {\r\n      return this.innerWidth + 'px';\r\n    }\r\n\r\n    return '100%';\r\n  }\r\n\r\n  trackByGroups(index: number, colGroup: any): any {\r\n    return colGroup.type;\r\n  }\r\n\r\n  columnTrackingFn(index: number, column: any): any {\r\n    return column.$$id;\r\n  }\r\n\r\n  onColumnResized(width: number, column: DataTableColumnDirective): void {\r\n    if (width <= column.minWidth) {\r\n      width = column.minWidth;\r\n    } else if (width >= column.maxWidth) {\r\n      width = column.maxWidth;\r\n    }\r\n\r\n    this.resize.emit({\r\n      column,\r\n      prevValue: column.width,\r\n      newValue: width\r\n    });\r\n  }\r\n\r\n  onColumnReordered({ prevIndex, newIndex, model }: any): void {\r\n    const column = this.getColumn(newIndex);\r\n    column.isTarget = false;\r\n    column.targetMarkerContext = undefined;\r\n    this.reorder.emit({\r\n      column: model,\r\n      prevValue: prevIndex,\r\n      newValue: newIndex\r\n    });\r\n  }\r\n\r\n  onTargetChanged({ prevIndex, newIndex, initialIndex }: any): void {\r\n    if (prevIndex || prevIndex === 0) {\r\n      const oldColumn = this.getColumn(prevIndex);\r\n      oldColumn.isTarget = false;\r\n      oldColumn.targetMarkerContext = undefined;\r\n    }\r\n    if (newIndex || newIndex === 0) {\r\n      const newColumn = this.getColumn(newIndex);\r\n      newColumn.isTarget = true;\r\n\r\n      if (initialIndex !== newIndex) {\r\n        newColumn.targetMarkerContext = {\r\n          class: 'targetMarker '.concat(initialIndex > newIndex ? 'dragFromRight' : 'dragFromLeft')\r\n        };\r\n      }\r\n    }\r\n  }\r\n\r\n  getColumn(index: number): any {\r\n    const leftColumnCount = this._columnsByPin[0].columns.length;\r\n    if (index < leftColumnCount) {\r\n      return this._columnsByPin[0].columns[index];\r\n    }\r\n\r\n    const centerColumnCount = this._columnsByPin[1].columns.length;\r\n    if (index < leftColumnCount + centerColumnCount) {\r\n      return this._columnsByPin[1].columns[index - leftColumnCount];\r\n    }\r\n\r\n    return this._columnsByPin[2].columns[index - leftColumnCount - centerColumnCount];\r\n  }\r\n\r\n  onSort({ column, prevValue, newValue }: any): void {\r\n    // if we are dragging don't sort!\r\n    if (column.dragging) {\r\n      return;\r\n    }\r\n\r\n    const sorts = this.calcNewSorts(column, prevValue, newValue);\r\n    this.sort.emit({\r\n      sorts,\r\n      column,\r\n      prevValue,\r\n      newValue\r\n    });\r\n  }\r\n\r\n  calcNewSorts(column: any, prevValue: number, newValue: number): any[] {\r\n    let idx = 0;\r\n\r\n    if (!this.sorts) {\r\n      this.sorts = [];\r\n    }\r\n\r\n    const sorts = this.sorts.map((s, i) => {\r\n      s = { ...s };\r\n      if (s.prop === column.prop) {\r\n        idx = i;\r\n      }\r\n      return s;\r\n    });\r\n\r\n    if (newValue === undefined) {\r\n      sorts.splice(idx, 1);\r\n    } else if (prevValue) {\r\n      sorts[idx].dir = newValue;\r\n    } else {\r\n      if (this.sortType === SortType.single) {\r\n        sorts.splice(0, this.sorts.length);\r\n      }\r\n\r\n      sorts.push({ dir: newValue, prop: column.prop });\r\n    }\r\n\r\n    return sorts;\r\n  }\r\n\r\n  setStylesByGroup() {\r\n    this._styleByGroup.left = this.calcStylesByGroup('left');\r\n    this._styleByGroup.center = this.calcStylesByGroup('center');\r\n    this._styleByGroup.right = this.calcStylesByGroup('right');\r\n    if (!this.destroyed) {\r\n      this.cd.detectChanges();\r\n    }\r\n  }\r\n\r\n  calcStylesByGroup(group: string): any {\r\n    const widths = this._columnGroupWidths;\r\n    const offsetX = this.offsetX;\r\n\r\n    const styles = {\r\n      width: `${widths[group]}px`\r\n    };\r\n\r\n    if (group === 'center') {\r\n      translateXY(styles, offsetX * -1, 0);\r\n    } else if (group === 'right') {\r\n      const totalDiff = widths.total - this.innerWidth;\r\n      const offset = totalDiff * -1;\r\n      translateXY(styles, offset, 0);\r\n    }\r\n\r\n    return styles;\r\n  }\r\n}\r\n","/**\r\n * Throttle a function\r\n */\r\nexport function throttle(func: any, wait: number, options?: any) {\r\n  options = options || {};\r\n  let context: any;\r\n  let args: any;\r\n  let result: any;\r\n  let timeout: any = null;\r\n  let previous = 0;\r\n\r\n  function later() {\r\n    previous = options.leading === false ? 0 : +new Date();\r\n    timeout = null;\r\n    result = func.apply(context, args);\r\n  }\r\n\r\n  return function (this: any) {\r\n    const now = +new Date();\r\n\r\n    if (!previous && options.leading === false) {\r\n      previous = now;\r\n    }\r\n\r\n    const remaining = wait - (now - previous);\r\n    context = this;\r\n    args = arguments;\r\n\r\n    if (remaining <= 0) {\r\n      clearTimeout(timeout);\r\n      timeout = null;\r\n      previous = now;\r\n      result = func.apply(context, args);\r\n    } else if (!timeout && options.trailing !== false) {\r\n      timeout = setTimeout(later, remaining);\r\n    }\r\n\r\n    return result;\r\n  };\r\n}\r\n\r\n/**\r\n * Throttle decorator\r\n *\r\n *  class MyClass {\r\n *    throttleable(10)\r\n *    myFn() { ... }\r\n *  }\r\n */\r\nexport function throttleable(duration: number, options?: any) {\r\n  return function innerDecorator(target: any, key: PropertyKey, descriptor: PropertyDescriptor) {\r\n    return {\r\n      configurable: true,\r\n      enumerable: descriptor.enumerable,\r\n      get: function getter() {\r\n        Object.defineProperty(this, key, {\r\n          configurable: true,\r\n          enumerable: descriptor.enumerable,\r\n          value: throttle(descriptor.value, duration, options)\r\n        });\r\n\r\n        return this[key];\r\n      }\r\n    };\r\n  };\r\n}\r\n","import { columnsByPin, columnsTotalWidth } from './column';\r\n\r\n/**\r\n * Calculates the Total Flex Grow\r\n */\r\nexport function getTotalFlexGrow(columns: any[]) {\r\n  let totalFlexGrow = 0;\r\n\r\n  for (const c of columns) {\r\n    totalFlexGrow += c.flexGrow || 0;\r\n  }\r\n\r\n  return totalFlexGrow;\r\n}\r\n\r\n/**\r\n * Adjusts the column widths.\r\n * Inspired by: https://github.com/facebook/fixed-data-table/blob/master/src/FixedDataTableWidthHelper.js\r\n */\r\nexport function adjustColumnWidths(allColumns: any, expectedWidth: any) {\r\n  const columnsWidth = columnsTotalWidth(allColumns);\r\n  const totalFlexGrow = getTotalFlexGrow(allColumns);\r\n  const colsByGroup = columnsByPin(allColumns);\r\n\r\n  if (columnsWidth !== expectedWidth) {\r\n    scaleColumns(colsByGroup, expectedWidth, totalFlexGrow);\r\n  }\r\n}\r\n\r\n/**\r\n * Resizes columns based on the flexGrow property, while respecting manually set widths\r\n */\r\nfunction scaleColumns(colsByGroup: any, maxWidth: any, totalFlexGrow: any) {\r\n  // calculate total width and flexgrow points for coulumns that can be resized\r\n  for (const attr in colsByGroup) {\r\n    for (const column of colsByGroup[attr]) {\r\n      if (!column.canAutoResize) {\r\n        maxWidth -= column.width;\r\n        totalFlexGrow -= column.flexGrow ? column.flexGrow : 0;\r\n      } else {\r\n        column.width = 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  const hasMinWidth = {};\r\n  let remainingWidth = maxWidth;\r\n\r\n  // resize columns until no width is left to be distributed\r\n  do {\r\n    const widthPerFlexPoint = remainingWidth / totalFlexGrow;\r\n    remainingWidth = 0;\r\n\r\n    for (const attr in colsByGroup) {\r\n      for (const column of colsByGroup[attr]) {\r\n        // if the column can be resize and it hasn't reached its minimum width yet\r\n        if (column.canAutoResize && !hasMinWidth[column.prop]) {\r\n          const newWidth = column.width + column.flexGrow * widthPerFlexPoint;\r\n          if (column.minWidth !== undefined && newWidth < column.minWidth) {\r\n            remainingWidth += newWidth - column.minWidth;\r\n            column.width = column.minWidth;\r\n            hasMinWidth[column.prop] = true;\r\n          } else {\r\n            column.width = newWidth;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  } while (remainingWidth !== 0);\r\n}\r\n\r\n/**\r\n * Forces the width of the columns to\r\n * distribute equally but overflowing when necessary\r\n *\r\n * Rules:\r\n *\r\n *  - If combined withs are less than the total width of the grid,\r\n *    proportion the widths given the min / max / normal widths to fill the width.\r\n *\r\n *  - If the combined widths, exceed the total width of the grid,\r\n *    use the standard widths.\r\n *\r\n *  - If a column is resized, it should always use that width\r\n *\r\n *  - The proportional widths should never fall below min size if specified.\r\n *\r\n *  - If the grid starts off small but then becomes greater than the size ( + / - )\r\n *    the width should use the original width; not the newly proportioned widths.\r\n */\r\nexport function forceFillColumnWidths(\r\n  allColumns: any[],\r\n  expectedWidth: number,\r\n  startIdx: number,\r\n  allowBleed: boolean,\r\n  defaultColWidth: number = 300,\r\n  level: number = 0\r\n) {\r\n  const columnsToResize = allColumns.slice(startIdx + 1, allColumns.length).filter(c => {\r\n    return c.canAutoResize !== false;\r\n  });\r\n\r\n  for (const column of columnsToResize) {\r\n    if (!column.$$oldWidth) {\r\n      column.$$oldWidth = column.width;\r\n    }\r\n  }\r\n\r\n  let additionWidthPerColumn = 0;\r\n  let exceedsWindow = false;\r\n  let contentWidth = getContentWidth(allColumns, defaultColWidth);\r\n  let remainingWidth = expectedWidth - contentWidth;\r\n  const columnsProcessed: any[] = [];\r\n  const remainingWidthLimit = 1; // when to stop\r\n\r\n  // This loop takes care of the\r\n  do {\r\n    additionWidthPerColumn = remainingWidth / columnsToResize.length;\r\n    exceedsWindow = contentWidth >= expectedWidth;\r\n\r\n    for (const column of columnsToResize) {\r\n      if (exceedsWindow && allowBleed) {\r\n        column.width = column.$$oldWidth || column.width || defaultColWidth;\r\n      } else {\r\n        const newSize = (column.width || defaultColWidth) + additionWidthPerColumn;\r\n\r\n        if (column.minWidth && newSize < column.minWidth) {\r\n          column.width = column.minWidth;\r\n          columnsProcessed.push(column);\r\n        } else if (column.maxWidth && newSize > column.maxWidth) {\r\n          column.width = column.maxWidth;\r\n          columnsProcessed.push(column);\r\n        } else {\r\n          column.width = newSize;\r\n        }\r\n      }\r\n\r\n      column.width = Math.max(0, column.width);\r\n    }\r\n\r\n    contentWidth = getContentWidth(allColumns);\r\n    remainingWidth = expectedWidth - contentWidth;\r\n    removeProcessedColumns(columnsToResize, columnsProcessed);\r\n  } while (remainingWidth > remainingWidthLimit && columnsToResize.length !== 0);\r\n\r\n  if (Math.abs(remainingWidth) > 1 && level < 5) {\r\n    forceFillColumnWidths(allColumns, expectedWidth, startIdx, allowBleed, defaultColWidth, level + 1);\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Remove the processed columns from the current active columns.\r\n */\r\nfunction removeProcessedColumns(columnsToResize: any[], columnsProcessed: any[]) {\r\n  for (const column of columnsProcessed) {\r\n    const index = columnsToResize.indexOf(column);\r\n    columnsToResize.splice(index, 1);\r\n  }\r\n}\r\n\r\n/**\r\n * Gets the width of the columns\r\n */\r\nfunction getContentWidth(allColumns: any, defaultColWidth: number = 300): number {\r\n  let contentWidth = 0;\r\n\r\n  for (const column of allColumns) {\r\n    contentWidth += column.width || defaultColWidth;\r\n  }\r\n\r\n  return contentWidth;\r\n}\r\n","import { getterForProp } from './column-prop-getters';\r\nimport { SortType } from '../types/sort.type';\r\nimport { SortDirection } from '../types/sort-direction.type';\r\nimport { SortPropDir } from '../types/sort-prop-dir.type';\r\n/**\r\n * Gets the next sort direction\r\n */\r\nexport function nextSortDir(sortType: SortType, current: SortDirection): SortDirection | undefined {\r\n  if (sortType === SortType.single) {\r\n    if (current === SortDirection.asc) {\r\n      return SortDirection.desc;\r\n    } else {\r\n      return SortDirection.asc;\r\n    }\r\n  } else {\r\n    if (!current) {\r\n      return SortDirection.asc;\r\n    } else if (current === SortDirection.asc) {\r\n      return SortDirection.desc;\r\n    } else if (current === SortDirection.desc) {\r\n      return undefined;\r\n    }\r\n    // avoid TS7030: Not all code paths return a value.\r\n    return undefined;\r\n  }\r\n}\r\n\r\n/**\r\n * Adapted from fueld-ui on 6/216\r\n * https://github.com/FuelInteractive/fuel-ui/tree/master/src/pipes/OrderBy\r\n */\r\nexport function orderByComparator(a: any, b: any): number {\r\n  if (a === null || typeof a === 'undefined') a = 0;\r\n  if (b === null || typeof b === 'undefined') b = 0;\r\n  if (a instanceof Date && b instanceof Date) {\r\n    if (a < b) return -1;\r\n    if (a > b) return 1;\r\n  } else if (isNaN(parseFloat(a)) || !isFinite(a) || isNaN(parseFloat(b)) || !isFinite(b)) {\r\n    // Convert to string in case of a=0 or b=0\r\n    a = String(a);\r\n    b = String(b);\r\n    // Isn't a number so lowercase the string to properly compare\r\n    if (a.toLowerCase() < b.toLowerCase()) return -1;\r\n    if (a.toLowerCase() > b.toLowerCase()) return 1;\r\n  } else {\r\n    // Parse strings as numbers to compare properly\r\n    if (parseFloat(a) < parseFloat(b)) return -1;\r\n    if (parseFloat(a) > parseFloat(b)) return 1;\r\n  }\r\n\r\n  // equal each other\r\n  return 0;\r\n}\r\n\r\n/**\r\n * creates a shallow copy of the `rows` input and returns the sorted copy. this function\r\n * does not sort the `rows` argument in place\r\n */\r\nexport function sortRows(rows: any[], columns: any[], dirs: SortPropDir[]): any[] {\r\n  if (!rows) return [];\r\n  if (!dirs || !dirs.length || !columns) return [...rows];\r\n\r\n  /**\r\n   * record the row ordering of results from prior sort operations (if applicable)\r\n   * this is necessary to guarantee stable sorting behavior\r\n   */\r\n  const rowToIndexMap = new Map<any, number>();\r\n  rows.forEach((row, index) => rowToIndexMap.set(row, index));\r\n\r\n  const temp = [...rows];\r\n  const cols = columns.reduce((obj, col) => {\r\n    if (col.comparator && typeof col.comparator === 'function') {\r\n      obj[col.prop] = col.comparator;\r\n    }\r\n    return obj;\r\n  }, {});\r\n\r\n  // cache valueGetter and compareFn so that they\r\n  // do not need to be looked-up in the sort function body\r\n  const cachedDirs = dirs.map(dir => {\r\n    const prop = dir.prop;\r\n    return {\r\n      prop,\r\n      dir: dir.dir,\r\n      valueGetter: getterForProp(prop),\r\n      compareFn: cols[prop] || orderByComparator\r\n    };\r\n  });\r\n\r\n  return temp.sort(function (rowA: any, rowB: any) {\r\n    for (const cachedDir of cachedDirs) {\r\n      // Get property and valuegetters for column to be sorted\r\n      const { prop, valueGetter } = cachedDir;\r\n      // Get A and B cell values from rows based on properties of the columns\r\n      const propA = valueGetter(rowA, prop);\r\n      const propB = valueGetter(rowB, prop);\r\n\r\n      // Compare function gets five parameters:\r\n      // Two cell values to be compared as propA and propB\r\n      // Two rows corresponding to the cells as rowA and rowB\r\n      // Direction of the sort for this column as SortDirection\r\n      // Compare can be a standard JS comparison function (a,b) => -1|0|1\r\n      // as additional parameters are silently ignored. The whole row and sort\r\n      // direction enable more complex sort logic.\r\n      const comparison =\r\n        cachedDir.dir !== SortDirection.desc\r\n          ? cachedDir.compareFn(propA, propB, rowA, rowB, cachedDir.dir)\r\n          : -cachedDir.compareFn(propA, propB, rowA, rowB, cachedDir.dir);\r\n\r\n      // Don't return 0 yet in case of needing to sort by next property\r\n      if (comparison !== 0) return comparison;\r\n    }\r\n\r\n    if (!(rowToIndexMap.has(rowA) && rowToIndexMap.has(rowB))) return 0;\r\n\r\n    /**\r\n     * all else being equal, preserve original order of the rows (stable sort)\r\n     */\r\n    return rowToIndexMap.get(rowA) < rowToIndexMap.get(rowB) ? -1 : 1;\r\n  });\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  ElementRef,\r\n  EventEmitter,\r\n  ViewChild,\r\n  HostListener,\r\n  ContentChildren,\r\n  OnInit,\r\n  QueryList,\r\n  AfterViewInit,\r\n  HostBinding,\r\n  ContentChild,\r\n  DoCheck,\r\n  KeyValueDiffers,\r\n  KeyValueDiffer,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  SkipSelf,\r\n  Optional,\r\n  Inject\r\n} from '@angular/core';\r\n\r\nimport { DatatableGroupHeaderDirective } from './body/body-group-header.directive';\r\n\r\nimport { BehaviorSubject, Subscription } from 'rxjs';\r\nimport { INgxDatatableConfig } from '../ngx-datatable.module';\r\nimport { groupRowsByParents, optionalGetterForProp } from '../utils/tree';\r\nimport { TableColumn } from '../types/table-column.type';\r\nimport { setColumnDefaults, translateTemplates } from '../utils/column-helper';\r\nimport { ColumnMode } from '../types/column-mode.type';\r\nimport { SelectionType } from '../types/selection.type';\r\nimport { SortType } from '../types/sort.type';\r\nimport { ContextmenuType } from '../types/contextmenu.type';\r\nimport { DataTableColumnDirective } from './columns/column.directive';\r\nimport { DatatableRowDetailDirective } from './row-detail/row-detail.directive';\r\nimport { DatatableFooterDirective } from './footer/footer.directive';\r\nimport { DataTableBodyComponent } from './body/body.component';\r\nimport { DataTableHeaderComponent } from './header/header.component';\r\nimport { ScrollbarHelper } from '../services/scrollbar-helper.service';\r\nimport { ColumnChangesService } from '../services/column-changes.service';\r\nimport { DimensionsHelper } from '../services/dimensions-helper.service';\r\nimport { throttleable } from '../utils/throttle';\r\nimport { forceFillColumnWidths, adjustColumnWidths } from '../utils/math';\r\nimport { sortRows } from '../utils/sort';\r\n\r\n@Component({\r\n  selector: 'ngx-datatable',\r\n  templateUrl: './datatable.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  styleUrls: ['./datatable.component.scss'],\r\n  host: {\r\n    class: 'ngx-datatable'\r\n  }\r\n})\r\nexport class DatatableComponent implements OnInit, DoCheck, AfterViewInit {\r\n  /**\r\n   * Template for the target marker of drag target columns.\r\n   */\r\n  @Input() targetMarkerTemplate: any;\r\n\r\n  /**\r\n   * Rows that are displayed in the table.\r\n   */\r\n  @Input() set rows(val: any) {\r\n    this._rows = val;\r\n\r\n    if (val) {\r\n      this._internalRows = [...val];\r\n    }\r\n\r\n    // auto sort on new updates\r\n    if (!this.externalSorting) {\r\n      this.sortInternalRows();\r\n    }\r\n\r\n    // auto group by parent on new update\r\n    this._internalRows = groupRowsByParents(\r\n      this._internalRows,\r\n      optionalGetterForProp(this.treeFromRelation),\r\n      optionalGetterForProp(this.treeToRelation)\r\n    );\r\n\r\n    // recalculate sizes/etc\r\n    this.recalculate();\r\n\r\n    if (this._rows && this._groupRowsBy) {\r\n      // If a column has been specified in _groupRowsBy created a new array with the data grouped by that row\r\n      this.groupedRows = this.groupArrayBy(this._rows, this._groupRowsBy);\r\n      this.groupedRows.forEach(group => {\r\n        group.value = groupRowsByParents(group.value, optionalGetterForProp(this.treeFromRelation), optionalGetterForProp(this.treeToRelation));\r\n      });\r\n    }\r\n\r\n    this.cd.markForCheck();\r\n    this.cd.detectChanges();\r\n  }\r\n\r\n  /**\r\n   * Gets the rows.\r\n   */\r\n  get rows(): any {\r\n    return this._rows;\r\n  }\r\n\r\n  /**\r\n   * This attribute allows the user to set the name of the column to group the data with\r\n   */\r\n  @Input() set groupRowsBy(val: string) {\r\n    if (val) {\r\n      this._groupRowsBy = val;\r\n      if (this._rows && this._groupRowsBy) {\r\n        // cretes a new array with the data grouped\r\n        this.groupedRows = this.groupArrayBy(this._rows, this._groupRowsBy);\r\n      }\r\n    }\r\n  }\r\n\r\n  get groupRowsBy() {\r\n    return this._groupRowsBy;\r\n  }\r\n\r\n  /**\r\n   * This attribute allows the user to set a grouped array in the following format:\r\n   *  [\r\n   *    {groupid=1} [\r\n   *      {id=1 name=\"test1\"},\r\n   *      {id=2 name=\"test2\"},\r\n   *      {id=3 name=\"test3\"}\r\n   *    ]},\r\n   *    {groupid=2>[\r\n   *      {id=4 name=\"test4\"},\r\n   *      {id=5 name=\"test5\"},\r\n   *      {id=6 name=\"test6\"}\r\n   *    ]}\r\n   *  ]\r\n   */\r\n  @Input() groupedRows: any[];\r\n\r\n  /**\r\n   * Columns to be displayed.\r\n   */\r\n  @Input() set columns(val: TableColumn[]) {\r\n    if (val) {\r\n      this._internalColumns = [...val];\r\n      setColumnDefaults(this._internalColumns);\r\n      this.recalculateColumns();\r\n    }\r\n\r\n    this._columns = val;\r\n  }\r\n\r\n  /**\r\n   * Get the columns.\r\n   */\r\n  get columns(): TableColumn[] {\r\n    return this._columns;\r\n  }\r\n\r\n  /**\r\n   * List of row objects that should be\r\n   * represented as selected in the grid.\r\n   * Default value: `[]`\r\n   */\r\n  @Input() selected: any[] = [];\r\n\r\n  /**\r\n   * Enable vertical scrollbars\r\n   */\r\n  @Input() scrollbarV: boolean = false;\r\n\r\n  /**\r\n   * Enable horz scrollbars\r\n   */\r\n  @Input() scrollbarH: boolean = false;\r\n\r\n  /**\r\n   * The row height; which is necessary\r\n   * to calculate the height for the lazy rendering.\r\n   */\r\n  @Input() rowHeight: number | 'auto' | ((row?: any) => number) = 30;\r\n\r\n  /**\r\n   * Type of column width distribution formula.\r\n   * Example: flex, force, standard\r\n   */\r\n  @Input() columnMode: ColumnMode | keyof typeof ColumnMode = ColumnMode.standard;\r\n\r\n  /**\r\n   * The minimum header height in pixels.\r\n   * Pass a falsey for no header\r\n   */\r\n  @Input() headerHeight: number = 30;\r\n\r\n  /**\r\n   * The minimum footer height in pixels.\r\n   * Pass falsey for no footer\r\n   */\r\n  @Input() footerHeight: number = 0;\r\n\r\n  /**\r\n   * If the table should use external paging\r\n   * otherwise its assumed that all data is preloaded.\r\n   */\r\n  @Input() externalPaging: boolean = false;\r\n\r\n  /**\r\n   * If the table should use external sorting or\r\n   * the built-in basic sorting.\r\n   */\r\n  @Input() externalSorting: boolean = false;\r\n\r\n  /**\r\n   * The page size to be shown.\r\n   * Default value: `undefined`\r\n   */\r\n  @Input() set limit(val: number | undefined) {\r\n    this._limit = val;\r\n\r\n    // recalculate sizes/etc\r\n    this.recalculate();\r\n  }\r\n\r\n  /**\r\n   * Gets the limit.\r\n   */\r\n  get limit(): number | undefined {\r\n    return this._limit;\r\n  }\r\n\r\n  /**\r\n   * The total count of all rows.\r\n   * Default value: `0`\r\n   */\r\n  @Input() set count(val: number) {\r\n    this._count = val;\r\n\r\n    // recalculate sizes/etc\r\n    this.recalculate();\r\n  }\r\n\r\n  /**\r\n   * Gets the count.\r\n   */\r\n  get count(): number {\r\n    return this._count;\r\n  }\r\n\r\n  /**\r\n   * The current offset ( page - 1 ) shown.\r\n   * Default value: `0`\r\n   */\r\n  @Input() set offset(val: number) {\r\n    this._offset = val;\r\n  }\r\n  get offset(): number {\r\n    return Math.max(Math.min(this._offset, Math.ceil(this.rowCount / this.pageSize) - 1), 0);\r\n  }\r\n\r\n  /**\r\n   * Show the linear loading bar.\r\n   * Default value: `false`\r\n   */\r\n  @Input() loadingIndicator: boolean = false;\r\n\r\n  /**\r\n   * Type of row selection. Options are:\r\n   *\r\n   *  - `single`\r\n   *  - `multi`\r\n   *  - `checkbox`\r\n   *  - `multiClick`\r\n   *  - `cell`\r\n   *\r\n   * For no selection pass a `falsey`.\r\n   * Default value: `undefined`\r\n   */\r\n  @Input() selectionType: SelectionType;\r\n\r\n  /**\r\n   * Enable/Disable ability to re-order columns\r\n   * by dragging them.\r\n   */\r\n  @Input() reorderable: boolean = true;\r\n\r\n  /**\r\n   * Swap columns on re-order columns or\r\n   * move them.\r\n   */\r\n  @Input() swapColumns: boolean = true;\r\n\r\n  /**\r\n   * The type of sorting\r\n   */\r\n  @Input() sortType: SortType = SortType.single;\r\n\r\n  /**\r\n   * Array of sorted columns by property and type.\r\n   * Default value: `[]`\r\n   */\r\n  @Input() sorts: any[] = [];\r\n\r\n  /**\r\n   * Css class overrides\r\n   */\r\n  @Input() cssClasses: any = {\r\n    sortAscending: 'datatable-icon-up',\r\n    sortDescending: 'datatable-icon-down',\r\n    sortUnset: 'datatable-icon-sort-unset',\r\n    pagerLeftArrow: 'datatable-icon-left',\r\n    pagerRightArrow: 'datatable-icon-right',\r\n    pagerPrevious: 'datatable-icon-prev',\r\n    pagerNext: 'datatable-icon-skip'\r\n  };\r\n\r\n  /**\r\n   * Message overrides for localization\r\n   *\r\n   * emptyMessage     [default] = 'No data to display'\r\n   * totalMessage     [default] = 'total'\r\n   * selectedMessage  [default] = 'selected'\r\n   */\r\n  @Input() messages: any = {\r\n    // Message to show when array is presented\r\n    // but contains no values\r\n    emptyMessage: 'Нет данных для отображения',\r\n\r\n    // Footer total message\r\n    totalMessage: 'Всего',\r\n\r\n    // Footer selected message\r\n    selectedMessage: 'Выбрано'\r\n  };\r\n\r\n  /**\r\n   * Row specific classes.\r\n   * Similar implementation to ngClass.\r\n   *\r\n   *  [rowClass]=\"'first second'\"\r\n   *  [rowClass]=\"{ 'first': true, 'second': true, 'third': false }\"\r\n   */\r\n  @Input() rowClass: any;\r\n\r\n  /**\r\n   * A boolean/function you can use to check whether you want\r\n   * to select a particular row based on a criteria. Example:\r\n   *\r\n   *    (selection) => {\r\n   *      return selection !== 'Ethel Price';\r\n   *    }\r\n   */\r\n  @Input() selectCheck: any;\r\n\r\n  /**\r\n   * A function you can use to check whether you want\r\n   * to show the checkbox for a particular row based on a criteria. Example:\r\n   *\r\n   *    (row, column, value) => {\r\n   *      return row.name !== 'Ethel Price';\r\n   *    }\r\n   */\r\n  @Input() displayCheck: (row: any, column?: any, value?: any) => boolean;\r\n\r\n  /**\r\n   * A boolean you can use to set the detault behaviour of rows and groups\r\n   * whether they will start expanded or not. If ommited the default is NOT expanded.\r\n   *\r\n   */\r\n  @Input() groupExpansionDefault: boolean = false;\r\n\r\n  /**\r\n   * Property to which you can use for custom tracking of rows.\r\n   * Example: 'name'\r\n   */\r\n  @Input() trackByProp: string;\r\n\r\n  /**\r\n   * Property to which you can use for determining select all\r\n   * rows on current page or not.\r\n   *\r\n   * @memberOf DatatableComponent\r\n   */\r\n  @Input() selectAllRowsOnPage = false;\r\n\r\n  /**\r\n   * A flag for row virtualization on / off\r\n   */\r\n  @Input() virtualization: boolean = true;\r\n\r\n  /**\r\n   * Tree from relation\r\n   */\r\n  @Input() treeFromRelation: string;\r\n\r\n  /**\r\n   * Tree to relation\r\n   */\r\n  @Input() treeToRelation: string;\r\n\r\n  /**\r\n   * A flag for switching summary row on / off\r\n   */\r\n  @Input() summaryRow: boolean = false;\r\n\r\n  /**\r\n   * A height of summary row\r\n   */\r\n  @Input() summaryHeight: number = 30;\r\n\r\n  /**\r\n   * A property holds a summary row position: top/bottom\r\n   */\r\n  @Input() summaryPosition: string = 'top';\r\n\r\n  /**\r\n   * Body was scrolled typically in a `scrollbarV:true` scenario.\r\n   */\r\n  @Output() scroll: EventEmitter<any> = new EventEmitter();\r\n\r\n  /**\r\n   * A cell or row was focused via keyboard or mouse click.\r\n   */\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n\r\n  /**\r\n   * A cell or row was selected.\r\n   */\r\n  @Output() select: EventEmitter<any> = new EventEmitter();\r\n\r\n  /**\r\n   * Column sort was invoked.\r\n   */\r\n  @Output() sort: EventEmitter<any> = new EventEmitter();\r\n\r\n  /**\r\n   * The table was paged either triggered by the pager or the body scroll.\r\n   */\r\n  @Output() page: EventEmitter<any> = new EventEmitter();\r\n\r\n  /**\r\n   * Columns were re-ordered.\r\n   */\r\n  @Output() reorder: EventEmitter<any> = new EventEmitter();\r\n\r\n  /**\r\n   * Column was resized.\r\n   */\r\n  @Output() resize: EventEmitter<any> = new EventEmitter();\r\n\r\n  /**\r\n   * The context menu was invoked on the table.\r\n   * type indicates whether the header or the body was clicked.\r\n   * content contains either the column or the row that was clicked.\r\n   */\r\n  @Output() tableContextmenu = new EventEmitter<{ event: MouseEvent; type: ContextmenuType; content: any }>(false);\r\n\r\n  /**\r\n   * A row was expanded ot collapsed for tree\r\n   */\r\n  @Output() treeAction: EventEmitter<any> = new EventEmitter();\r\n\r\n  /**\r\n   * CSS class applied if the header height if fixed height.\r\n   */\r\n  @HostBinding('class.fixed-header')\r\n  get isFixedHeader(): boolean {\r\n    const headerHeight: number | string = this.headerHeight;\r\n    return typeof headerHeight === 'string' ? <string>headerHeight !== 'auto' : true;\r\n  }\r\n\r\n  /**\r\n   * CSS class applied to the root element if\r\n   * the row heights are fixed heights.\r\n   */\r\n  @HostBinding('class.fixed-row')\r\n  get isFixedRow(): boolean {\r\n    return this.rowHeight !== 'auto';\r\n  }\r\n\r\n  /**\r\n   * CSS class applied to root element if\r\n   * vertical scrolling is enabled.\r\n   */\r\n  @HostBinding('class.scroll-vertical')\r\n  get isVertScroll(): boolean {\r\n    return this.scrollbarV;\r\n  }\r\n\r\n  /**\r\n   * CSS class applied to root element if\r\n   * virtualization is enabled.\r\n   */\r\n  @HostBinding('class.virtualized')\r\n  get isVirtualized(): boolean {\r\n    return this.virtualization;\r\n  }\r\n\r\n  /**\r\n   * CSS class applied to the root element\r\n   * if the horziontal scrolling is enabled.\r\n   */\r\n  @HostBinding('class.scroll-horz')\r\n  get isHorScroll(): boolean {\r\n    return this.scrollbarH;\r\n  }\r\n\r\n  /**\r\n   * CSS class applied to root element is selectable.\r\n   */\r\n  @HostBinding('class.selectable')\r\n  get isSelectable(): boolean {\r\n    return this.selectionType !== undefined;\r\n  }\r\n\r\n  /**\r\n   * CSS class applied to root is checkbox selection.\r\n   */\r\n  @HostBinding('class.checkbox-selection')\r\n  get isCheckboxSelection(): boolean {\r\n    return this.selectionType === SelectionType.checkbox;\r\n  }\r\n\r\n  /**\r\n   * CSS class applied to root if cell selection.\r\n   */\r\n  @HostBinding('class.cell-selection')\r\n  get isCellSelection(): boolean {\r\n    return this.selectionType === SelectionType.cell;\r\n  }\r\n\r\n  /**\r\n   * CSS class applied to root if single select.\r\n   */\r\n  @HostBinding('class.single-selection')\r\n  get isSingleSelection(): boolean {\r\n    return this.selectionType === SelectionType.single;\r\n  }\r\n\r\n  /**\r\n   * CSS class added to root element if mulit select\r\n   */\r\n  @HostBinding('class.multi-selection')\r\n  get isMultiSelection(): boolean {\r\n    return this.selectionType === SelectionType.multi;\r\n  }\r\n\r\n  /**\r\n   * CSS class added to root element if mulit click select\r\n   */\r\n  @HostBinding('class.multi-click-selection')\r\n  get isMultiClickSelection(): boolean {\r\n    return this.selectionType === SelectionType.multiClick;\r\n  }\r\n\r\n  /**\r\n   * Column templates gathered from `ContentChildren`\r\n   * if described in your markup.\r\n   */\r\n  @ContentChildren(DataTableColumnDirective)\r\n  set columnTemplates(val: QueryList<DataTableColumnDirective>) {\r\n    this._columnTemplates = val;\r\n    this.translateColumns(val);\r\n  }\r\n\r\n  /**\r\n   * Returns the column templates.\r\n   */\r\n  get columnTemplates(): QueryList<DataTableColumnDirective> {\r\n    return this._columnTemplates;\r\n  }\r\n\r\n  /**\r\n   * Row Detail templates gathered from the ContentChild\r\n   */\r\n  @ContentChild(DatatableRowDetailDirective)\r\n  rowDetail: DatatableRowDetailDirective;\r\n\r\n  /**\r\n   * Group Header templates gathered from the ContentChild\r\n   */\r\n  @ContentChild(DatatableGroupHeaderDirective)\r\n  groupHeader: DatatableGroupHeaderDirective;\r\n\r\n  /**\r\n   * Footer template gathered from the ContentChild\r\n   */\r\n  @ContentChild(DatatableFooterDirective)\r\n  footer: DatatableFooterDirective;\r\n\r\n  /**\r\n   * Reference to the body component for manually\r\n   * invoking functions on the body.\r\n   */\r\n  @ViewChild(DataTableBodyComponent)\r\n  bodyComponent: DataTableBodyComponent;\r\n\r\n  /**\r\n   * Reference to the header component for manually\r\n   * invoking functions on the header.\r\n   *\r\n   * @memberOf DatatableComponent\r\n   */\r\n  @ViewChild(DataTableHeaderComponent)\r\n  headerComponent: DataTableHeaderComponent;\r\n\r\n  /**\r\n   * Returns if all rows are selected.\r\n   */\r\n  get allRowsSelected(): boolean {\r\n    let allRowsSelected = this.rows && this.selected && this.selected.length === this.rows.length;\r\n\r\n    if (this.bodyComponent && this.selectAllRowsOnPage) {\r\n      const indexes = this.bodyComponent.indexes;\r\n      const rowsOnPage = indexes.last - indexes.first;\r\n      allRowsSelected = this.selected.length === rowsOnPage;\r\n    }\r\n\r\n    return this.selected && this.rows && this.rows.length !== 0 && allRowsSelected;\r\n  }\r\n\r\n  element: HTMLElement;\r\n  _innerWidth: number;\r\n  pageSize: number;\r\n  bodyHeight: number;\r\n  rowCount: number = 0;\r\n  rowDiffer: KeyValueDiffer<{}, {}>;\r\n\r\n  _offsetX = new BehaviorSubject(0);\r\n  _limit: number | undefined;\r\n  _count: number = 0;\r\n  _offset: number = 0;\r\n  _rows: any[];\r\n  _groupRowsBy: string;\r\n  _internalRows: any[];\r\n  _internalColumns: TableColumn[];\r\n  _columns: TableColumn[];\r\n  _columnTemplates: QueryList<DataTableColumnDirective>;\r\n  _subscriptions: Subscription[] = [];\r\n\r\n  constructor(\r\n    @SkipSelf() private scrollbarHelper: ScrollbarHelper,\r\n    @SkipSelf() private dimensionsHelper: DimensionsHelper,\r\n    private cd: ChangeDetectorRef,\r\n    element: ElementRef,\r\n    differs: KeyValueDiffers,\r\n    private columnChangesService: ColumnChangesService,\r\n    @Optional() @Inject('configuration') private configuration: INgxDatatableConfig\r\n  ) {\r\n    // get ref to elm for measuring\r\n    this.element = element.nativeElement;\r\n    this.rowDiffer = differs.find({}).create();\r\n\r\n    // apply global settings from Module.forRoot\r\n    if (this.configuration && this.configuration.messages) {\r\n      this.messages = { ...this.configuration.messages };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Lifecycle hook that is called after data-bound\r\n   * properties of a directive are initialized.\r\n   */\r\n  ngOnInit(): void {\r\n    // need to call this immediatly to size\r\n    // if the table is hidden the visibility\r\n    // listener will invoke this itself upon show\r\n    this.recalculate();\r\n  }\r\n\r\n  /**\r\n   * Lifecycle hook that is called after a component's\r\n   * view has been fully initialized.\r\n   */\r\n  ngAfterViewInit(): void {\r\n    if (!this.externalSorting) {\r\n      this.sortInternalRows();\r\n    }\r\n\r\n    // this has to be done to prevent the change detection\r\n    // tree from freaking out because we are readjusting\r\n    if (typeof requestAnimationFrame === 'undefined') {\r\n      return;\r\n    }\r\n\r\n    requestAnimationFrame(() => {\r\n      this.recalculate();\r\n\r\n      // emit page for virtual server-side kickoff\r\n      if (this.externalPaging && this.scrollbarV) {\r\n        this.page.emit({\r\n          count: this.count,\r\n          pageSize: this.pageSize,\r\n          limit: this.limit,\r\n          offset: 0\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Lifecycle hook that is called after a component's\r\n   * content has been fully initialized.\r\n   */\r\n  ngAfterContentInit() {\r\n    this.columnTemplates.changes.subscribe(v => this.translateColumns(v));\r\n    this.listenForColumnInputChanges();\r\n  }\r\n\r\n  /**\r\n   * This will be used when displaying or selecting rows.\r\n   * when tracking/comparing them, we'll use the value of this fn,\r\n   *\r\n   * (`fn(x) === fn(y)` instead of `x === y`)\r\n   */\r\n  @Input() rowIdentity: (x: any) => any = (x: any) => {\r\n    if (this._groupRowsBy) {\r\n      // each group in groupedRows are stored as {key, value: [rows]},\r\n      // where key is the groupRowsBy index\r\n      return x.key;\r\n    } else {\r\n      return x;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Translates the templates to the column objects\r\n   */\r\n  translateColumns(val: any) {\r\n    if (val) {\r\n      const arr = val.toArray();\r\n      if (arr.length) {\r\n        this._internalColumns = translateTemplates(arr);\r\n        setColumnDefaults(this._internalColumns);\r\n        this.recalculateColumns();\r\n        this.sortInternalRows();\r\n        this.cd.markForCheck();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a map with the data grouped by the user choice of grouping index\r\n   *\r\n   * @param originalArray the original array passed via parameter\r\n   * @param groupByIndex  the index of the column to group the data by\r\n   */\r\n  groupArrayBy(originalArray: any, groupBy: any) {\r\n    // create a map to hold groups with their corresponding results\r\n    const map = new Map();\r\n    let i: number = 0;\r\n\r\n    originalArray.forEach((item: any) => {\r\n      const key = item[groupBy];\r\n      if (!map.has(key)) {\r\n        map.set(key, [item]);\r\n      } else {\r\n        map.get(key).push(item);\r\n      }\r\n      i++;\r\n    });\r\n\r\n    const addGroup = (key: any, value: any) => {\r\n      return { key, value };\r\n    };\r\n\r\n    // convert map back to a simple array of objects\r\n    return Array.from(map, x => addGroup(x[0], x[1]));\r\n  }\r\n\r\n  /*\r\n   * Lifecycle hook that is called when Angular dirty checks a directive.\r\n   */\r\n  ngDoCheck(): void {\r\n    if (this.rowDiffer.diff(this.rows)) {\r\n      if (!this.externalSorting) {\r\n        this.sortInternalRows();\r\n      } else {\r\n        this._internalRows = [...this.rows];\r\n      }\r\n\r\n      // auto group by parent on new update\r\n      this._internalRows = groupRowsByParents(\r\n        this._internalRows,\r\n        optionalGetterForProp(this.treeFromRelation),\r\n        optionalGetterForProp(this.treeToRelation)\r\n      );\r\n\r\n      this.recalculatePages();\r\n      this.cd.markForCheck();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Recalc's the sizes of the grid.\r\n   *\r\n   * Updated automatically on changes to:\r\n   *\r\n   *  - Columns\r\n   *  - Rows\r\n   *  - Paging related\r\n   *\r\n   * Also can be manually invoked or upon window resize.\r\n   */\r\n  recalculate(): void {\r\n    this.recalculateDims();\r\n    this.recalculateColumns();\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  /**\r\n   * Window resize handler to update sizes.\r\n   */\r\n  @HostListener('window:resize')\r\n  @throttleable(5)\r\n  onWindowResize(): void {\r\n    this.recalculate();\r\n  }\r\n\r\n  /**\r\n   * Recalulcates the column widths based on column width\r\n   * distribution mode and scrollbar offsets.\r\n   */\r\n  recalculateColumns(\r\n    columns: any[] = this._internalColumns,\r\n    forceIdx: number = -1,\r\n    allowBleed: boolean = this.scrollbarH\r\n  ): any[] | undefined {\r\n    if (!columns) return undefined;\r\n\r\n    let width = this._innerWidth;\r\n    if (this.scrollbarV) {\r\n      width = width - this.scrollbarHelper.width;\r\n    }\r\n\r\n    if (this.columnMode === ColumnMode.force) {\r\n      forceFillColumnWidths(columns, width, forceIdx, allowBleed);\r\n    } else if (this.columnMode === ColumnMode.flex) {\r\n      adjustColumnWidths(columns, width);\r\n    }\r\n\r\n    return columns;\r\n  }\r\n\r\n  /**\r\n   * Recalculates the dimensions of the table size.\r\n   * Internally calls the page size and row count calcs too.\r\n   *\r\n   */\r\n  recalculateDims(): void {\r\n    const dims = this.dimensionsHelper.getDimensions(this.element);\r\n    this._innerWidth = Math.floor(dims.width);\r\n\r\n    if (this.scrollbarV) {\r\n      let height = dims.height;\r\n      if (this.headerHeight) height = height - this.headerHeight;\r\n      if (this.footerHeight) height = height - this.footerHeight;\r\n      this.bodyHeight = height;\r\n    }\r\n\r\n    this.recalculatePages();\r\n  }\r\n\r\n  /**\r\n   * Recalculates the pages after a update.\r\n   */\r\n  recalculatePages(): void {\r\n    this.pageSize = this.calcPageSize();\r\n    this.rowCount = this.calcRowCount();\r\n  }\r\n\r\n  /**\r\n   * Body triggered a page event.\r\n   */\r\n  onBodyPage({ offset }: any): void {\r\n    // Avoid pagination caming from body events like scroll when the table\r\n    // has no virtualization and the external paging is enable.\r\n    // This means, let's the developer handle pagination by my him(her) self\r\n    if (this.externalPaging && !this.virtualization) {\r\n      return;\r\n    }\r\n\r\n    this.offset = offset;\r\n\r\n    this.page.emit({\r\n      count: this.count,\r\n      pageSize: this.pageSize,\r\n      limit: this.limit,\r\n      offset: this.offset\r\n    });\r\n  }\r\n\r\n  /**\r\n   * The body triggered a scroll event.\r\n   */\r\n  onBodyScroll(event: MouseEvent): void {\r\n    this._offsetX.next(event.offsetX);\r\n    this.scroll.emit(event);\r\n    this.cd.detectChanges();\r\n  }\r\n\r\n  /**\r\n   * The footer triggered a page event.\r\n   */\r\n  onFooterPage(event: any) {\r\n    this.offset = event.page - 1;\r\n    this.bodyComponent.updateOffsetY(this.offset);\r\n\r\n    this.page.emit({\r\n      count: this.count,\r\n      pageSize: this.pageSize,\r\n      limit: this.limit,\r\n      offset: this.offset\r\n    });\r\n\r\n    if (this.selectAllRowsOnPage) {\r\n      this.selected = [];\r\n      this.select.emit({\r\n        selected: this.selected\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Recalculates the sizes of the page\r\n   */\r\n  calcPageSize(val: any[] = this.rows): number {\r\n    // Keep the page size constant even if the row has been expanded.\r\n    // This is because an expanded row is still considered to be a child of\r\n    // the original row.  Hence calculation would use rowHeight only.\r\n    if (this.scrollbarV && this.virtualization) {\r\n      const size = Math.ceil(this.bodyHeight / (this.rowHeight as number));\r\n      return Math.max(size, 0);\r\n    }\r\n\r\n    // if limit is passed, we are paging\r\n    if (this.limit !== undefined) {\r\n      return this.limit;\r\n    }\r\n\r\n    // otherwise use row length\r\n    if (val) {\r\n      return val.length;\r\n    }\r\n\r\n    // other empty :(\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Calculates the row count.\r\n   */\r\n  calcRowCount(val: any[] = this.rows): number {\r\n    if (!this.externalPaging) {\r\n      if (!val) return 0;\r\n\r\n      if (this.groupedRows) {\r\n        return this.groupedRows.length;\r\n      } else if (this.treeFromRelation != null && this.treeToRelation != null) {\r\n        return this._internalRows.length;\r\n      } else {\r\n        return val.length;\r\n      }\r\n    }\r\n\r\n    return this.count;\r\n  }\r\n\r\n  /**\r\n   * The header triggered a contextmenu event.\r\n   */\r\n  onColumnContextmenu({ event, column }: any): void {\r\n    this.tableContextmenu.emit({ event, type: ContextmenuType.header, content: column });\r\n  }\r\n\r\n  /**\r\n   * The body triggered a contextmenu event.\r\n   */\r\n  onRowContextmenu({ event, row }: any): void {\r\n    this.tableContextmenu.emit({ event, type: ContextmenuType.body, content: row });\r\n  }\r\n\r\n  /**\r\n   * The header triggered a column resize event.\r\n   */\r\n  onColumnResize({ column, newValue }: any): void {\r\n    /* Safari/iOS 10.2 workaround */\r\n    if (column === undefined) {\r\n      return;\r\n    }\r\n\r\n    let idx: number;\r\n    const cols = this._internalColumns.map((c, i) => {\r\n      c = { ...c };\r\n\r\n      if (c.$$id === column.$$id) {\r\n        idx = i;\r\n        c.width = newValue;\r\n\r\n        // set this so we can force the column\r\n        // width distribution to be to this value\r\n        c.$$oldWidth = newValue;\r\n      }\r\n\r\n      return c;\r\n    });\r\n\r\n    this.recalculateColumns(cols, idx);\r\n    this._internalColumns = cols;\r\n\r\n    this.resize.emit({\r\n      column,\r\n      newValue\r\n    });\r\n  }\r\n\r\n  /**\r\n   * The header triggered a column re-order event.\r\n   */\r\n  onColumnReorder({ column, newValue, prevValue }: any): void {\r\n    const cols = this._internalColumns.map(c => {\r\n      return { ...c };\r\n    });\r\n\r\n    if (this.swapColumns) {\r\n      const prevCol = cols[newValue];\r\n      cols[newValue] = column;\r\n      cols[prevValue] = prevCol;\r\n    } else {\r\n      if (newValue > prevValue) {\r\n        const movedCol = cols[prevValue];\r\n        for (let i = prevValue; i < newValue; i++) {\r\n          cols[i] = cols[i + 1];\r\n        }\r\n        cols[newValue] = movedCol;\r\n      } else {\r\n        const movedCol = cols[prevValue];\r\n        for (let i = prevValue; i > newValue; i--) {\r\n          cols[i] = cols[i - 1];\r\n        }\r\n        cols[newValue] = movedCol;\r\n      }\r\n    }\r\n\r\n    this._internalColumns = cols;\r\n\r\n    this.reorder.emit({\r\n      column,\r\n      newValue,\r\n      prevValue\r\n    });\r\n  }\r\n\r\n  /**\r\n   * The header triggered a column sort event.\r\n   */\r\n  onColumnSort(event: any): void {\r\n    // clean selected rows\r\n    if (this.selectAllRowsOnPage) {\r\n      this.selected = [];\r\n      this.select.emit({\r\n        selected: this.selected\r\n      });\r\n    }\r\n\r\n    this.sorts = event.sorts;\r\n\r\n    // this could be optimized better since it will resort\r\n    // the rows again on the 'push' detection...\r\n    if (this.externalSorting === false) {\r\n      // don't use normal setter so we don't resort\r\n      this.sortInternalRows();\r\n    }\r\n\r\n    // auto group by parent on new update\r\n    this._internalRows = groupRowsByParents(\r\n      this._internalRows,\r\n      optionalGetterForProp(this.treeFromRelation),\r\n      optionalGetterForProp(this.treeToRelation)\r\n    );\r\n\r\n    // Always go to first page when sorting to see the newly sorted data\r\n    this.offset = 0;\r\n    this.bodyComponent.updateOffsetY(this.offset);\r\n    this.sort.emit(event);\r\n  }\r\n\r\n  /**\r\n   * Toggle all row selection\r\n   */\r\n  onHeaderSelect(event: any): void {\r\n    if (this.bodyComponent && this.selectAllRowsOnPage) {\r\n      // before we splice, chk if we currently have all selected\r\n      const first = this.bodyComponent.indexes.first;\r\n      const last = this.bodyComponent.indexes.last;\r\n\r\n      const selectableRows =\r\n        this.selectCheck && typeof this.selectCheck === 'function'\r\n          ? this._internalRows.slice(first, last).filter(this.selectCheck.bind(this))\r\n          : this._internalRows.slice(first, last);\r\n\r\n      const allSelected = this.selected.length === selectableRows.length;\r\n\r\n      // remove all existing either way\r\n      this.selected = [];\r\n\r\n      // do the opposite here\r\n      if (!allSelected) {\r\n        this.selected.push(...selectableRows);\r\n      }\r\n    } else {\r\n      const selectableRows = this.selectCheck && typeof this.selectCheck === 'function' ? this.rows.filter(this.selectCheck.bind(this)) : this.rows;\r\n      // before we splice, chk if we currently have all selected\r\n      const allSelected = this.selected.length === selectableRows.length;\r\n      // remove all existing either way\r\n      this.selected = [];\r\n      // do the opposite here\r\n      if (!allSelected) {\r\n        this.selected.push(...selectableRows);\r\n      }\r\n    }\r\n\r\n    this.select.emit({\r\n      selected: this.selected\r\n    });\r\n  }\r\n\r\n  /**\r\n   * A row was selected from body\r\n   */\r\n  onBodySelect(event: any): void {\r\n    this.select.emit(event);\r\n  }\r\n\r\n  /**\r\n   * A row was expanded or collapsed for tree\r\n   */\r\n  onTreeAction(event: any) {\r\n    const row = event.row;\r\n    // TODO: For duplicated items this will not work\r\n    const rowIndex = this._rows.findIndex(r => r[this.treeToRelation] === event.row[this.treeToRelation]);\r\n    this.treeAction.emit({ row, rowIndex });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._subscriptions.forEach(subscription => subscription.unsubscribe());\r\n  }\r\n\r\n  /**\r\n   * listen for changes to input bindings of all DataTableColumnDirective and\r\n   * trigger the columnTemplates.changes observable to emit\r\n   */\r\n  private listenForColumnInputChanges(): void {\r\n    this._subscriptions.push(\r\n      this.columnChangesService.columnInputChanges$.subscribe(() => {\r\n        if (this.columnTemplates) {\r\n          this.columnTemplates.notifyOnChanges();\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  private sortInternalRows(): void {\r\n    this._internalRows = sortRows(this._internalRows, this._internalColumns, this.sorts);\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  EventEmitter,\r\n  Output,\r\n  HostBinding,\r\n  HostListener,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef\r\n} from '@angular/core';\r\nimport { SortType } from '../../types/sort.type';\r\nimport { SelectionType } from '../../types/selection.type';\r\nimport { TableColumn } from '../../types/table-column.type';\r\nimport { nextSortDir } from '../../utils/sort';\r\nimport { SortDirection } from '../../types/sort-direction.type';\r\n\r\n@Component({\r\n  selector: 'datatable-header-cell',\r\n  template: `\r\n    <div class=\"datatable-header-cell-template-wrap\">\r\n      <ng-template\r\n        *ngIf=\"isTarget\"\r\n        [ngTemplateOutlet]=\"targetMarkerTemplate\"\r\n        [ngTemplateOutletContext]=\"targetMarkerContext\"\r\n      >\r\n      </ng-template>\r\n      <label *ngIf=\"isCheckboxable\" class=\"datatable-checkbox\">\r\n        <input type=\"checkbox\" [checked]=\"allRowsSelected\" (change)=\"select.emit(!allRowsSelected)\" />\r\n      </label>\r\n      <span *ngIf=\"!column.headerTemplate\" class=\"datatable-header-cell-wrapper\">\r\n        <span class=\"datatable-header-cell-label draggable\" (click)=\"onSort()\" [innerHTML]=\"name\"> </span>\r\n      </span>\r\n      <ng-template\r\n        *ngIf=\"column.headerTemplate\"\r\n        [ngTemplateOutlet]=\"column.headerTemplate\"\r\n        [ngTemplateOutletContext]=\"cellContext\"\r\n      >\r\n      </ng-template>\r\n      <span (click)=\"onSort()\" [class]=\"sortClass\"> </span>\r\n    </div>\r\n  `,\r\n  host: {\r\n    class: 'datatable-header-cell'\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DataTableHeaderCellComponent {\r\n  @Input() sortType: SortType;\r\n  @Input() sortAscendingIcon: string;\r\n  @Input() sortDescendingIcon: string;\r\n  @Input() sortUnsetIcon: string;\r\n\r\n  @Input() isTarget: boolean;\r\n  @Input() targetMarkerTemplate: any;\r\n  @Input() targetMarkerContext: any;\r\n\r\n  _allRowsSelected: boolean;\r\n\r\n  @Input() set allRowsSelected(value) {\r\n    this._allRowsSelected = value;\r\n    this.cellContext.allRowsSelected = value;\r\n  }\r\n  get allRowsSelected() {\r\n    return this._allRowsSelected;\r\n  }\r\n\r\n  @Input() selectionType: SelectionType;\r\n\r\n  @Input() set column(column: TableColumn) {\r\n    this._column = column;\r\n    this.cellContext.column = column;\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  get column(): TableColumn {\r\n    return this._column;\r\n  }\r\n\r\n  @HostBinding('style.height.px')\r\n  @Input()\r\n  headerHeight: number;\r\n\r\n  @Input() set sorts(val: any[]) {\r\n    this._sorts = val;\r\n    this.sortDir = this.calcSortDir(val);\r\n    this.cellContext.sortDir = this.sortDir;\r\n    this.sortClass = this.calcSortClass(this.sortDir);\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  get sorts(): any[] {\r\n    return this._sorts;\r\n  }\r\n\r\n  @Output() sort: EventEmitter<any> = new EventEmitter();\r\n  @Output() select: EventEmitter<any> = new EventEmitter();\r\n  @Output() columnContextmenu = new EventEmitter<{ event: MouseEvent; column: any }>(false);\r\n\r\n  @HostBinding('class')\r\n  get columnCssClasses(): any {\r\n    let cls = 'datatable-header-cell';\r\n\r\n    if (this.column.sortable) cls += ' sortable';\r\n    if (this.column.resizeable) cls += ' resizeable';\r\n    if (this.column.headerClass) {\r\n      if (typeof this.column.headerClass === 'string') {\r\n        cls += ' ' + this.column.headerClass;\r\n      } else if (typeof this.column.headerClass === 'function') {\r\n        const res = this.column.headerClass({\r\n          column: this.column\r\n        });\r\n\r\n        if (typeof res === 'string') {\r\n          cls += res;\r\n        } else if (typeof res === 'object') {\r\n          const keys = Object.keys(res);\r\n          for (const k of keys) {\r\n            if (res[k] === true) cls += ` ${k}`;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    const sortDir = this.sortDir;\r\n    if (sortDir) {\r\n      cls += ` sort-active sort-${sortDir}`;\r\n    }\r\n\r\n    return cls;\r\n  }\r\n\r\n  @HostBinding('attr.title')\r\n  get name(): string {\r\n    // guaranteed to have a value by setColumnDefaults() in column-helper.ts\r\n    return this.column.headerTemplate === undefined ? this.column.name : undefined;\r\n  }\r\n\r\n  @HostBinding('style.minWidth.px')\r\n  get minWidth(): number {\r\n    return this.column.minWidth;\r\n  }\r\n\r\n  @HostBinding('style.maxWidth.px')\r\n  get maxWidth(): number {\r\n    return this.column.maxWidth;\r\n  }\r\n\r\n  @HostBinding('style.width.px')\r\n  get width(): number {\r\n    return this.column.width;\r\n  }\r\n\r\n  get isCheckboxable(): boolean {\r\n    return this.column.checkboxable && this.column.headerCheckboxable;\r\n  }\r\n\r\n  sortFn = this.onSort.bind(this);\r\n  sortClass: string;\r\n  sortDir: SortDirection;\r\n  selectFn = this.select.emit.bind(this.select);\r\n\r\n  cellContext: any;\r\n\r\n  private _column: TableColumn;\r\n  private _sorts: any[];\r\n\r\n  constructor(private cd: ChangeDetectorRef) {\r\n    this.cellContext = {\r\n      column: this.column,\r\n      sortDir: this.sortDir,\r\n      sortFn: this.sortFn,\r\n      allRowsSelected: this.allRowsSelected,\r\n      selectFn: this.selectFn\r\n    };\r\n  }\r\n\r\n  @HostListener('contextmenu', ['$event'])\r\n  onContextmenu($event: MouseEvent): void {\r\n    this.columnContextmenu.emit({ event: $event, column: this.column });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.sortClass = this.calcSortClass(this.sortDir);\r\n  }\r\n\r\n  calcSortDir(sorts: any[]): any {\r\n    if (sorts && this.column) {\r\n      const sort = sorts.find((s: any) => {\r\n        return s.prop === this.column.prop;\r\n      });\r\n\r\n      if (sort) return sort.dir;\r\n    }\r\n  }\r\n\r\n  onSort(): void {\r\n    if (!this.column.sortable) return;\r\n\r\n    const newValue = nextSortDir(this.sortType, this.sortDir);\r\n    this.sort.emit({\r\n      column: this.column,\r\n      prevValue: this.sortDir,\r\n      newValue\r\n    });\r\n  }\r\n\r\n  calcSortClass(sortDir: SortDirection): string {\r\n    if (!this.cellContext.column.sortable) return;\r\n    if (sortDir === SortDirection.asc) {\r\n      return `sort-btn sort-asc ${this.sortAscendingIcon}`;\r\n    } else if (sortDir === SortDirection.desc) {\r\n      return `sort-btn sort-desc ${this.sortDescendingIcon}`;\r\n    } else {\r\n      return `sort-btn ${this.sortUnsetIcon}`;\r\n    }\r\n  }\r\n}\r\n","import { Component, Output, EventEmitter, ChangeDetectionStrategy, Input } from '@angular/core';\r\nimport { DatatableFooterDirective } from './footer.directive';\r\n@Component({\r\n  selector: 'datatable-footer',\r\n  template: `\r\n    <div\r\n      class=\"datatable-footer-inner\"\r\n      [ngClass]=\"{ 'selected-count': selectedMessage }\"\r\n      [style.height.px]=\"footerHeight\"\r\n    >\r\n      <ng-template\r\n        *ngIf=\"footerTemplate\"\r\n        [ngTemplateOutlet]=\"footerTemplate.template\"\r\n        [ngTemplateOutletContext]=\"{\r\n          rowCount: rowCount,\r\n          pageSize: pageSize,\r\n          selectedCount: selectedCount,\r\n          curPage: curPage,\r\n          offset: offset\r\n        }\"\r\n      >\r\n      </ng-template>\r\n      <div class=\"page-count\" *ngIf=\"!footerTemplate\">\r\n        <span *ngIf=\"selectedMessage\"> {{ selectedCount?.toLocaleString() }} {{ selectedMessage }} / </span>\r\n        {{ rowCount?.toLocaleString() }} {{ totalMessage }}\r\n      </div>\r\n      <datatable-pager\r\n        *ngIf=\"!footerTemplate\"\r\n        [pagerLeftArrowIcon]=\"pagerLeftArrowIcon\"\r\n        [pagerRightArrowIcon]=\"pagerRightArrowIcon\"\r\n        [pagerPreviousIcon]=\"pagerPreviousIcon\"\r\n        [pagerNextIcon]=\"pagerNextIcon\"\r\n        [page]=\"curPage\"\r\n        [size]=\"pageSize\"\r\n        [count]=\"rowCount\"\r\n        [hidden]=\"!isVisible\"\r\n        (change)=\"page.emit($event)\"\r\n      >\r\n      </datatable-pager>\r\n    </div>\r\n  `,\r\n  host: {\r\n    class: 'datatable-footer'\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DataTableFooterComponent {\r\n  @Input() footerHeight: number;\r\n  @Input() rowCount: number;\r\n  @Input() pageSize: number;\r\n  @Input() offset: number;\r\n  @Input() pagerLeftArrowIcon: string;\r\n  @Input() pagerRightArrowIcon: string;\r\n  @Input() pagerPreviousIcon: string;\r\n  @Input() pagerNextIcon: string;\r\n  @Input() totalMessage: string;\r\n  @Input() footerTemplate: DatatableFooterDirective;\r\n\r\n  @Input() selectedCount: number = 0;\r\n  @Input() selectedMessage: string | boolean;\r\n\r\n  @Output() page: EventEmitter<any> = new EventEmitter();\r\n\r\n  get isVisible(): boolean {\r\n    return this.rowCount / this.pageSize > 1;\r\n  }\r\n\r\n  get curPage(): number {\r\n    return this.offset + 1;\r\n  }\r\n}\r\n","import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'datatable-pager',\r\n  template: `\r\n    <ul class=\"pager\">\r\n      <li [class.disabled]=\"!canPrevious()\">\r\n        <a role=\"button\" aria-label=\"go to first page\" href=\"javascript:void(0)\" (click)=\"selectPage(1)\">\r\n          <i class=\"{{ pagerPreviousIcon }}\"></i>\r\n        </a>\r\n      </li>\r\n      <li [class.disabled]=\"!canPrevious()\">\r\n        <a role=\"button\" aria-label=\"go to previous page\" href=\"javascript:void(0)\" (click)=\"prevPage()\">\r\n          <i class=\"{{ pagerLeftArrowIcon }}\"></i>\r\n        </a>\r\n      </li>\r\n      <li\r\n        role=\"button\"\r\n        [attr.aria-label]=\"'page ' + pg.number\"\r\n        class=\"pages\"\r\n        *ngFor=\"let pg of pages\"\r\n        [class.active]=\"pg.number === page\"\r\n      >\r\n        <a href=\"javascript:void(0)\" (click)=\"selectPage(pg.number)\">\r\n          {{ pg.text }}\r\n        </a>\r\n      </li>\r\n      <li [class.disabled]=\"!canNext()\">\r\n        <a role=\"button\" aria-label=\"go to next page\" href=\"javascript:void(0)\" (click)=\"nextPage()\">\r\n          <i class=\"{{ pagerRightArrowIcon }}\"></i>\r\n        </a>\r\n      </li>\r\n      <li *ngIf=\"showLastPage\" [class.disabled]=\"!canNext()\">\r\n        <a role=\"button\" aria-label=\"go to last page\" href=\"javascript:void(0)\" (click)=\"selectPage(totalPages)\">\r\n          <i class=\"{{ pagerNextIcon }}\"></i>\r\n        </a>\r\n      </li>\r\n    </ul>\r\n  `,\r\n  host: {\r\n    class: 'datatable-pager'\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DataTablePagerComponent {\r\n  @Input() pagerLeftArrowIcon: string;\r\n  @Input() pagerRightArrowIcon: string;\r\n  @Input() pagerPreviousIcon: string;\r\n  @Input() pagerNextIcon: string;\r\n  @Input() showLastPage = true;\r\n\r\n  @Input()\r\n  set size(val: number) {\r\n    this._size = val;\r\n    this.pages = this.calcPages();\r\n  }\r\n\r\n  get size(): number {\r\n    return this._size;\r\n  }\r\n\r\n  @Input()\r\n  set count(val: number) {\r\n    this._count = val;\r\n    this.pages = this.calcPages();\r\n  }\r\n\r\n  get count(): number {\r\n    return this._count;\r\n  }\r\n\r\n  @Input()\r\n  set page(val: number) {\r\n    this._page = val;\r\n    this.pages = this.calcPages();\r\n  }\r\n\r\n  get page(): number {\r\n    return this._page;\r\n  }\r\n\r\n  get totalPages(): number {\r\n    const count = this.size < 1 ? 1 : Math.ceil(this.count / this.size);\r\n    return Math.max(count || 0, 1);\r\n  }\r\n\r\n  @Output() change: EventEmitter<any> = new EventEmitter();\r\n\r\n  _count: number = 0;\r\n  _page: number = 1;\r\n  _size: number = 0;\r\n  pages: any;\r\n\r\n  canPrevious(): boolean {\r\n    return this.page > 1;\r\n  }\r\n\r\n  canNext(): boolean {\r\n    return this.page < this.totalPages;\r\n  }\r\n\r\n  prevPage(): void {\r\n    this.selectPage(this.page - 1);\r\n  }\r\n\r\n  nextPage(): void {\r\n    this.selectPage(this.page + 1);\r\n  }\r\n\r\n  selectPage(page: number): void {\r\n    if (page > 0 && page <= this.totalPages && page !== this.page) {\r\n      this.page = page;\r\n\r\n      this.change.emit({\r\n        page\r\n      });\r\n    }\r\n  }\r\n\r\n  calcPages(page?: number): any[] {\r\n    const pages = [];\r\n    let startPage = 1;\r\n    let endPage = this.totalPages;\r\n    const maxSize = 5;\r\n    const isMaxSized = maxSize < this.totalPages;\r\n\r\n    page = page || this.page;\r\n\r\n    if (isMaxSized) {\r\n      startPage = page - Math.floor(maxSize / 2);\r\n      endPage = page + Math.floor(maxSize / 2);\r\n\r\n      if (startPage < 1) {\r\n        startPage = 1;\r\n        endPage = Math.min(startPage + maxSize - 1, this.totalPages);\r\n      } else if (endPage > this.totalPages) {\r\n        startPage = Math.max(this.totalPages - maxSize + 1, 1);\r\n        endPage = this.totalPages;\r\n      }\r\n    }\r\n\r\n    for (let num = startPage; num <= endPage; num++) {\r\n      pages.push({\r\n        number: num,\r\n        text: <string>(<any>num)\r\n      });\r\n    }\r\n\r\n    return pages;\r\n  }\r\n}\r\n","export enum Keys {\r\n  up = 38,\r\n  down = 40,\r\n  return = 13,\r\n  escape = 27,\r\n  left = 37,\r\n  right = 39\r\n}\r\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'datatable-progress',\r\n  template: `\r\n    <div class=\"progress-linear\" role=\"progressbar\">\r\n      <div class=\"container\">\r\n        <div class=\"bar\"></div>\r\n      </div>\r\n    </div>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ProgressBarComponent {}\r\n","import {\r\n  Component,\r\n  Input,\r\n  HostBinding,\r\n  ElementRef,\r\n  Output,\r\n  KeyValueDiffers,\r\n  KeyValueDiffer,\r\n  EventEmitter,\r\n  HostListener,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  DoCheck,\r\n  SkipSelf\r\n} from '@angular/core';\r\n\r\nimport { TreeStatus } from './body-cell.component';\r\nimport { columnsByPin, columnGroupWidths, columnsByPinArr } from '../../utils/column';\r\nimport { Keys } from '../../utils/keys';\r\nimport { ScrollbarHelper } from '../../services/scrollbar-helper.service';\r\nimport { translateXY } from '../../utils/translate';\r\n\r\n@Component({\r\n  selector: 'datatable-body-row',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <div\r\n      *ngFor=\"let colGroup of _columnsByPin; let i = index; trackBy: trackByGroups\"\r\n      class=\"datatable-row-{{ colGroup.type }} datatable-row-group\"\r\n      [ngStyle]=\"_groupStyles[colGroup.type]\"\r\n    >\r\n      <datatable-body-cell\r\n        role=\"cell\"\r\n        *ngFor=\"let column of colGroup.columns; let ii = index; trackBy: columnTrackingFn\"\r\n        tabindex=\"-1\"\r\n        [row]=\"row\"\r\n        [group]=\"group\"\r\n        [expanded]=\"expanded\"\r\n        [isSelected]=\"isSelected\"\r\n        [rowIndex]=\"rowIndex\"\r\n        [column]=\"column\"\r\n        [rowHeight]=\"rowHeight\"\r\n        [selectCheck]=\"selectCheck\"\r\n        [displayCheck]=\"displayCheck\"\r\n        [treeStatus]=\"treeStatus\"\r\n        (activate)=\"onActivate($event, ii)\"\r\n        (treeAction)=\"onTreeAction()\"\r\n      >\r\n      </datatable-body-cell>\r\n    </div>\r\n  `\r\n})\r\nexport class DataTableBodyRowComponent implements DoCheck {\r\n  @Input() set columns(val: any[]) {\r\n    this._columns = val;\r\n    this.recalculateColumns(val);\r\n    this.buildStylesByGroup();\r\n  }\r\n\r\n  get columns(): any[] {\r\n    return this._columns;\r\n  }\r\n\r\n  @Input() set innerWidth(val: number) {\r\n    if (this._columns) {\r\n      const colByPin = columnsByPin(this._columns);\r\n      this._columnGroupWidths = columnGroupWidths(colByPin, this._columns);\r\n    }\r\n\r\n    this._innerWidth = val;\r\n    this.recalculateColumns();\r\n    this.buildStylesByGroup();\r\n  }\r\n\r\n  get innerWidth(): number {\r\n    return this._innerWidth;\r\n  }\r\n\r\n  @Input() expanded: boolean;\r\n  @Input() rowClass: any;\r\n  @Input() row: any;\r\n  @Input() group: any;\r\n  @Input() isSelected: boolean;\r\n  @Input() rowIndex: number;\r\n  @Input() selectCheck: any;\r\n  @Input() displayCheck: any;\r\n  @Input() treeStatus: TreeStatus = 'collapsed';\r\n\r\n  @Input()\r\n  set offsetX(val: number) {\r\n    this._offsetX = val;\r\n    this.buildStylesByGroup();\r\n  }\r\n  get offsetX() {\r\n    return this._offsetX;\r\n  }\r\n\r\n  @HostBinding('class')\r\n  get cssClass() {\r\n    let cls = 'datatable-body-row';\r\n    if (this.isSelected) {\r\n      cls += ' active';\r\n    }\r\n    if (this.rowIndex % 2 !== 0) {\r\n      cls += ' datatable-row-odd';\r\n    }\r\n    if (this.rowIndex % 2 === 0) {\r\n      cls += ' datatable-row-even';\r\n    }\r\n\r\n    if (this.rowClass) {\r\n      const res = this.rowClass(this.row);\r\n      if (typeof res === 'string') {\r\n        cls += ` ${res}`;\r\n      } else if (typeof res === 'object') {\r\n        const keys = Object.keys(res);\r\n        for (const k of keys) {\r\n          if (res[k] === true) {\r\n            cls += ` ${k}`;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return cls;\r\n  }\r\n\r\n  @HostBinding('style.height.px')\r\n  @Input()\r\n  rowHeight: number;\r\n\r\n  @HostBinding('style.width.px')\r\n  get columnsTotalWidths(): string {\r\n    return this._columnGroupWidths.total;\r\n  }\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() treeAction: EventEmitter<any> = new EventEmitter();\r\n\r\n  _element: any;\r\n  _columnGroupWidths: any;\r\n  _columnsByPin: any;\r\n  _offsetX: number;\r\n  _columns: any[];\r\n  _innerWidth: number;\r\n  _groupStyles: { [prop: string]: {} } = {\r\n    left: {},\r\n    center: {},\r\n    right: {}\r\n  };\r\n\r\n  private _rowDiffer: KeyValueDiffer<{}, {}>;\r\n\r\n  constructor(\r\n    private differs: KeyValueDiffers,\r\n    @SkipSelf() private scrollbarHelper: ScrollbarHelper,\r\n    private cd: ChangeDetectorRef,\r\n    element: ElementRef\r\n  ) {\r\n    this._element = element.nativeElement;\r\n    this._rowDiffer = differs.find({}).create();\r\n  }\r\n\r\n  ngDoCheck(): void {\r\n    if (this._rowDiffer.diff(this.row)) {\r\n      this.cd.markForCheck();\r\n    }\r\n  }\r\n\r\n  trackByGroups(index: number, colGroup: any): any {\r\n    return colGroup.type;\r\n  }\r\n\r\n  columnTrackingFn(index: number, column: any): any {\r\n    return column.$$id;\r\n  }\r\n\r\n  buildStylesByGroup() {\r\n    this._groupStyles.left = this.calcStylesByGroup('left');\r\n    this._groupStyles.center = this.calcStylesByGroup('center');\r\n    this._groupStyles.right = this.calcStylesByGroup('right');\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  calcStylesByGroup(group: string) {\r\n    const widths = this._columnGroupWidths;\r\n    const offsetX = this.offsetX;\r\n\r\n    const styles = {\r\n      width: `${widths[group]}px`\r\n    };\r\n\r\n    if (group === 'left') {\r\n      translateXY(styles, offsetX, 0);\r\n    } else if (group === 'right') {\r\n      const bodyWidth = parseInt(this.innerWidth + '', 0);\r\n      const totalDiff = widths.total - bodyWidth;\r\n      const offsetDiff = totalDiff - offsetX;\r\n      const offset = (offsetDiff + this.scrollbarHelper.width) * -1;\r\n      translateXY(styles, offset, 0);\r\n    }\r\n\r\n    return styles;\r\n  }\r\n\r\n  onActivate(event: any, index: number): void {\r\n    event.cellIndex = index;\r\n    event.rowElement = this._element;\r\n    this.activate.emit(event);\r\n  }\r\n\r\n  @HostListener('keydown', ['$event'])\r\n  onKeyDown(event: KeyboardEvent): void {\r\n    const keyCode = event.keyCode;\r\n    const isTargetRow = event.target === this._element;\r\n\r\n    const isAction =\r\n      keyCode === Keys.return ||\r\n      keyCode === Keys.down ||\r\n      keyCode === Keys.up ||\r\n      keyCode === Keys.left ||\r\n      keyCode === Keys.right;\r\n\r\n    if (isAction && isTargetRow) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n\r\n      this.activate.emit({\r\n        type: 'keydown',\r\n        event,\r\n        row: this.row,\r\n        rowElement: this._element\r\n      });\r\n    }\r\n  }\r\n\r\n  @HostListener('mouseenter', ['$event'])\r\n  onMouseenter(event: any): void {\r\n    this.activate.emit({\r\n      type: 'mouseenter',\r\n      event,\r\n      row: this.row,\r\n      rowElement: this._element\r\n    });\r\n  }\r\n\r\n  recalculateColumns(val: any[] = this.columns): void {\r\n    this._columns = val;\r\n    const colsByPin = columnsByPin(this._columns);\r\n    this._columnsByPin = columnsByPinArr(this._columns);\r\n    this._columnGroupWidths = columnGroupWidths(colsByPin, this._columns);\r\n  }\r\n\r\n  onTreeAction() {\r\n    this.treeAction.emit();\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  HostListener,\r\n  DoCheck,\r\n  ChangeDetectionStrategy,\r\n  KeyValueDiffer,\r\n  ChangeDetectorRef,\r\n  KeyValueDiffers\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'datatable-row-wrapper',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <div *ngIf=\"groupHeader && groupHeader.template\" class=\"datatable-group-header\" [ngStyle]=\"getGroupHeaderStyle()\">\r\n      <ng-template\r\n        *ngIf=\"groupHeader && groupHeader.template\"\r\n        [ngTemplateOutlet]=\"groupHeader.template\"\r\n        [ngTemplateOutletContext]=\"groupContext\"\r\n      >\r\n      </ng-template>\r\n    </div>\r\n    <ng-content *ngIf=\"(groupHeader && groupHeader.template && expanded) || !groupHeader || !groupHeader.template\">\r\n    </ng-content>\r\n    <div\r\n      *ngIf=\"rowDetail && rowDetail.template && expanded\"\r\n      [style.height.px]=\"detailRowHeight\"\r\n      class=\"datatable-row-detail\"\r\n    >\r\n      <ng-template\r\n        *ngIf=\"rowDetail && rowDetail.template\"\r\n        [ngTemplateOutlet]=\"rowDetail.template\"\r\n        [ngTemplateOutletContext]=\"rowContext\"\r\n      >\r\n      </ng-template>\r\n    </div>\r\n  `,\r\n  host: {\r\n    class: 'datatable-row-wrapper'\r\n  }\r\n})\r\nexport class DataTableRowWrapperComponent implements DoCheck {\r\n  @Input() innerWidth: number;\r\n  @Input() rowDetail: any;\r\n  @Input() groupHeader: any;\r\n  @Input() offsetX: number;\r\n  @Input() detailRowHeight: any;\r\n  @Input() row: any;\r\n  @Input() groupedRows: any;\r\n  @Output() rowContextmenu = new EventEmitter<{ event: MouseEvent; row: any }>(false);\r\n\r\n  @Input() set rowIndex(val: number) {\r\n    this._rowIndex = val;\r\n    this.rowContext.rowIndex = val;\r\n    this.groupContext.rowIndex = val;\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  get rowIndex(): number {\r\n    return this._rowIndex;\r\n  }\r\n\r\n  @Input() set expanded(val: boolean) {\r\n    this._expanded = val;\r\n    this.groupContext.expanded = val;\r\n    this.rowContext.expanded = val;\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  get expanded(): boolean {\r\n    return this._expanded;\r\n  }\r\n\r\n  groupContext: any;\r\n  rowContext: any;\r\n\r\n  private rowDiffer: KeyValueDiffer<{}, {}>;\r\n  private _expanded: boolean = false;\r\n  private _rowIndex: number;\r\n\r\n  constructor(private cd: ChangeDetectorRef, private differs: KeyValueDiffers) {\r\n    this.groupContext = {\r\n      group: this.row,\r\n      expanded: this.expanded,\r\n      rowIndex: this.rowIndex\r\n    };\r\n\r\n    this.rowContext = {\r\n      row: this.row,\r\n      expanded: this.expanded,\r\n      rowIndex: this.rowIndex\r\n    };\r\n\r\n    this.rowDiffer = differs.find({}).create();\r\n  }\r\n\r\n  ngDoCheck(): void {\r\n    if (this.rowDiffer.diff(this.row)) {\r\n      this.rowContext.row = this.row;\r\n      this.groupContext.group = this.row;\r\n      this.cd.markForCheck();\r\n    }\r\n  }\r\n\r\n  @HostListener('contextmenu', ['$event'])\r\n  onContextmenu($event: MouseEvent): void {\r\n    this.rowContextmenu.emit({ event: $event, row: this.row });\r\n  }\r\n\r\n  getGroupHeaderStyle(): any {\r\n    const styles = {};\r\n\r\n    styles['transform'] = 'translate3d(' + this.offsetX + 'px, 0px, 0px)';\r\n    styles['backface-visibility'] = 'hidden';\r\n    styles['width'] = this.innerWidth;\r\n\r\n    return styles;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  PipeTransform,\r\n  HostBinding,\r\n  ViewChild,\r\n  ChangeDetectorRef,\r\n  Output,\r\n  EventEmitter,\r\n  HostListener,\r\n  ElementRef,\r\n  ViewContainerRef,\r\n  OnDestroy,\r\n  DoCheck,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\n\r\nimport { TableColumn } from '../../types/table-column.type';\r\nimport { SortDirection } from '../../types/sort-direction.type';\r\nimport { Keys } from '../../utils/keys';\r\n\r\nexport type TreeStatus = 'collapsed' | 'expanded' | 'loading' | 'disabled';\r\n\r\n@Component({\r\n  selector: 'datatable-body-cell',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <div class=\"datatable-body-cell-label\" [style.margin-left.px]=\"calcLeftMargin(column, row)\">\r\n      <label\r\n        *ngIf=\"column.checkboxable && (!displayCheck || displayCheck(row, column, value))\"\r\n        class=\"datatable-checkbox\"\r\n      >\r\n        <input type=\"checkbox\" [checked]=\"isSelected\" (click)=\"onCheckboxChange($event)\" [disabled]=\"selectCheck && !selectCheck(row)\" />\r\n      </label>\r\n      <ng-container *ngIf=\"column.isTreeColumn\">\r\n        <button\r\n          *ngIf=\"!column.treeToggleTemplate\"\r\n          class=\"datatable-tree-button\"\r\n          [disabled]=\"treeStatus === 'disabled'\"\r\n          (click)=\"onTreeAction()\"\r\n        >\r\n          <span>\r\n            <i *ngIf=\"treeStatus === 'loading'\" class=\"icon datatable-icon-collapse\"></i>\r\n            <i *ngIf=\"treeStatus === 'collapsed'\" class=\"icon datatable-icon-up\"></i>\r\n            <i *ngIf=\"treeStatus === 'expanded' || treeStatus === 'disabled'\" class=\"icon datatable-icon-down\"></i>\r\n          </span>\r\n        </button>\r\n        <ng-template\r\n          *ngIf=\"column.treeToggleTemplate\"\r\n          [ngTemplateOutlet]=\"column.treeToggleTemplate\"\r\n          [ngTemplateOutletContext]=\"{ cellContext: cellContext }\"\r\n        >\r\n        </ng-template>\r\n      </ng-container>\r\n\r\n      <span *ngIf=\"!column.cellTemplate\" [title]=\"sanitizedValue\" [innerHTML]=\"value\"> </span>\r\n      <ng-template\r\n        #cellTemplate\r\n        *ngIf=\"column.cellTemplate\"\r\n        [ngTemplateOutlet]=\"column.cellTemplate\"\r\n        [ngTemplateOutletContext]=\"cellContext\"\r\n      >\r\n      </ng-template>\r\n    </div>\r\n  `\r\n})\r\nexport class DataTableBodyCellComponent implements DoCheck, OnDestroy {\r\n  @Input() displayCheck: (row: any, column?: TableColumn, value?: any) => boolean;\r\n  @Input() selectCheck: any;\r\n\r\n  @Input() set group(group: any) {\r\n    this._group = group;\r\n    this.cellContext.group = group;\r\n    this.checkValueUpdates();\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  get group() {\r\n    return this._group;\r\n  }\r\n\r\n  @Input() set rowHeight(val: number) {\r\n    this._rowHeight = val;\r\n    this.cellContext.rowHeight = val;\r\n    this.checkValueUpdates();\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  get rowHeight() {\r\n    return this._rowHeight;\r\n  }\r\n\r\n  @Input() set isSelected(val: boolean) {\r\n    this._isSelected = val;\r\n    this.cellContext.isSelected = val;\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  get isSelected(): boolean {\r\n    return this._isSelected;\r\n  }\r\n\r\n  @Input() set expanded(val: boolean) {\r\n    this._expanded = val;\r\n    this.cellContext.expanded = val;\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  get expanded(): boolean {\r\n    return this._expanded;\r\n  }\r\n\r\n  @Input() set rowIndex(val: number) {\r\n    this._rowIndex = val;\r\n    this.cellContext.rowIndex = val;\r\n    this.checkValueUpdates();\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  get rowIndex(): number {\r\n    return this._rowIndex;\r\n  }\r\n\r\n  @Input() set column(column: TableColumn) {\r\n    this._column = column;\r\n    this.cellContext.column = column;\r\n    this.checkValueUpdates();\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  get column(): TableColumn {\r\n    return this._column;\r\n  }\r\n\r\n  @Input() set row(row: any) {\r\n    this._row = row;\r\n    this.cellContext.row = row;\r\n    this.checkValueUpdates();\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  get row(): any {\r\n    return this._row;\r\n  }\r\n\r\n  @Input() set sorts(val: any[]) {\r\n    this._sorts = val;\r\n    this.calcSortDir = this.calcSortDir(val);\r\n  }\r\n\r\n  get sorts(): any[] {\r\n    return this._sorts;\r\n  }\r\n\r\n  @Input() set treeStatus(status: TreeStatus) {\r\n    if (status !== 'collapsed' && status !== 'expanded' && status !== 'loading' && status !== 'disabled') {\r\n      this._treeStatus = 'collapsed';\r\n    } else {\r\n      this._treeStatus = status;\r\n    }\r\n    this.cellContext.treeStatus = this._treeStatus;\r\n    this.checkValueUpdates();\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  get treeStatus(): TreeStatus {\r\n    return this._treeStatus;\r\n  }\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() treeAction: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ViewChild('cellTemplate', { read: ViewContainerRef, static: true })\r\n  cellTemplate: ViewContainerRef;\r\n\r\n  @HostBinding('class')\r\n  get columnCssClasses(): any {\r\n    let cls = 'datatable-body-cell';\r\n    if (this.column.cellClass) {\r\n      if (typeof this.column.cellClass === 'string') {\r\n        cls += ' ' + this.column.cellClass;\r\n      } else if (typeof this.column.cellClass === 'function') {\r\n        const res = this.column.cellClass({\r\n          row: this.row,\r\n          group: this.group,\r\n          column: this.column,\r\n          value: this.value,\r\n          rowHeight: this.rowHeight\r\n        });\r\n\r\n        if (typeof res === 'string') {\r\n          cls += ' ' + res;\r\n        } else if (typeof res === 'object') {\r\n          const keys = Object.keys(res);\r\n          for (const k of keys) {\r\n            if (res[k] === true) {\r\n              cls += ` ${k}`;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (!this.sortDir) {\r\n      cls += ' sort-active';\r\n    }\r\n    if (this.isFocused) {\r\n      cls += ' active';\r\n    }\r\n    if (this.sortDir === SortDirection.asc) {\r\n      cls += ' sort-asc';\r\n    }\r\n    if (this.sortDir === SortDirection.desc) {\r\n      cls += ' sort-desc';\r\n    }\r\n\r\n    return cls;\r\n  }\r\n\r\n  @HostBinding('style.width.px')\r\n  get width(): number {\r\n    return this.column.width;\r\n  }\r\n\r\n  @HostBinding('style.minWidth.px')\r\n  get minWidth(): number {\r\n    return this.column.minWidth;\r\n  }\r\n\r\n  @HostBinding('style.maxWidth.px')\r\n  get maxWidth(): number {\r\n    return this.column.maxWidth;\r\n  }\r\n\r\n  @HostBinding('style.height')\r\n  get height(): string | number {\r\n    const height = this.rowHeight;\r\n    if (isNaN(height)) {\r\n      return height;\r\n    }\r\n    return height + 'px';\r\n  }\r\n\r\n  sanitizedValue: any;\r\n  value: any;\r\n  sortDir: SortDirection;\r\n  isFocused = false;\r\n  onCheckboxChangeFn = this.onCheckboxChange.bind(this);\r\n  activateFn = this.activate.emit.bind(this.activate);\r\n\r\n  cellContext: any;\r\n\r\n  private _isSelected: boolean;\r\n  private _sorts: any[];\r\n  private _column: TableColumn;\r\n  private _row: any;\r\n  private _group: any;\r\n  private _rowHeight: number;\r\n  private _rowIndex: number;\r\n  private _expanded: boolean;\r\n  private _element: any;\r\n  private _treeStatus: TreeStatus;\r\n\r\n  constructor(element: ElementRef, private cd: ChangeDetectorRef) {\r\n    this.cellContext = {\r\n      onCheckboxChangeFn: this.onCheckboxChangeFn,\r\n      activateFn: this.activateFn,\r\n      row: this.row,\r\n      group: this.group,\r\n      value: this.value,\r\n      column: this.column,\r\n      rowHeight: this.rowHeight,\r\n      isSelected: this.isSelected,\r\n      rowIndex: this.rowIndex,\r\n      treeStatus: this.treeStatus,\r\n      onTreeAction: this.onTreeAction.bind(this)\r\n    };\r\n\r\n    this._element = element.nativeElement;\r\n  }\r\n\r\n  ngDoCheck(): void {\r\n    this.checkValueUpdates();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.cellTemplate) {\r\n      this.cellTemplate.clear();\r\n    }\r\n  }\r\n\r\n  checkValueUpdates(): void {\r\n    let value = '';\r\n\r\n    if (!this.row || !this.column) {\r\n      value = '';\r\n    } else {\r\n      const val = this.column.$$valueGetter(this.row, this.column.prop);\r\n      const userPipe: PipeTransform = this.column.pipe;\r\n\r\n      if (userPipe) {\r\n        value = userPipe.transform(val);\r\n      } else if (value !== undefined) {\r\n        value = val;\r\n      }\r\n    }\r\n\r\n    if (this.value !== value) {\r\n      this.value = value;\r\n      this.cellContext.value = value;\r\n      this.sanitizedValue = value !== null && value !== undefined ? this.stripHtml(value) : value;\r\n      this.cd.markForCheck();\r\n    }\r\n  }\r\n\r\n  @HostListener('focus')\r\n  onFocus(): void {\r\n    this.isFocused = true;\r\n  }\r\n\r\n  @HostListener('blur')\r\n  onBlur(): void {\r\n    this.isFocused = false;\r\n  }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    this.activate.emit({\r\n      type: 'click',\r\n      event,\r\n      row: this.row,\r\n      group: this.group,\r\n      rowHeight: this.rowHeight,\r\n      column: this.column,\r\n      value: this.value,\r\n      cellElement: this._element\r\n    });\r\n  }\r\n\r\n  @HostListener('dblclick', ['$event'])\r\n  onDblClick(event: MouseEvent): void {\r\n    this.activate.emit({\r\n      type: 'dblclick',\r\n      event,\r\n      row: this.row,\r\n      group: this.group,\r\n      rowHeight: this.rowHeight,\r\n      column: this.column,\r\n      value: this.value,\r\n      cellElement: this._element\r\n    });\r\n  }\r\n\r\n  @HostListener('keydown', ['$event'])\r\n  onKeyDown(event: KeyboardEvent): void {\r\n    const keyCode = event.keyCode;\r\n    const isTargetCell = event.target === this._element;\r\n\r\n    const isAction =\r\n      keyCode === Keys.return ||\r\n      keyCode === Keys.down ||\r\n      keyCode === Keys.up ||\r\n      keyCode === Keys.left ||\r\n      keyCode === Keys.right;\r\n\r\n    if (isAction && isTargetCell) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n\r\n      this.activate.emit({\r\n        type: 'keydown',\r\n        event,\r\n        row: this.row,\r\n        group: this.group,\r\n        rowHeight: this.rowHeight,\r\n        column: this.column,\r\n        value: this.value,\r\n        cellElement: this._element\r\n      });\r\n    }\r\n  }\r\n\r\n  onCheckboxChange(event: any): void {\r\n    this.activate.emit({\r\n      type: 'checkbox',\r\n      event,\r\n      row: this.row,\r\n      group: this.group,\r\n      rowHeight: this.rowHeight,\r\n      column: this.column,\r\n      value: this.value,\r\n      cellElement: this._element,\r\n      treeStatus: 'collapsed'\r\n    });\r\n  }\r\n\r\n  calcSortDir(sorts: any[]): any {\r\n    if (!sorts) {\r\n      return;\r\n    }\r\n\r\n    const sort = sorts.find((s: any) => {\r\n      return s.prop === this.column.prop;\r\n    });\r\n\r\n    if (sort) {\r\n      return sort.dir;\r\n    }\r\n  }\r\n\r\n  stripHtml(html: string): string {\r\n    if (!html.replace) {\r\n      return html;\r\n    }\r\n    return html.replace(/<\\/?[^>]+(>|$)/g, '');\r\n  }\r\n\r\n  onTreeAction() {\r\n    this.treeAction.emit(this.row);\r\n  }\r\n\r\n  calcLeftMargin(column: any, row: any) {\r\n    const levelIndent = column.treeLevelIndent != null ? column.treeLevelIndent : 50;\r\n    return column.isTreeColumn ? row.level * levelIndent : 0;\r\n  }\r\n}\r\n","export function selectRows(selected: any[], row: any, comparefn: any) {\r\n  const selectedIndex = comparefn(row, selected);\r\n\r\n  if (selectedIndex > -1) {\r\n    selected.splice(selectedIndex, 1);\r\n  } else {\r\n    selected.push(row);\r\n  }\r\n\r\n  return selected;\r\n}\r\n\r\nexport function selectRowsBetween(\r\n  selected: any[],\r\n  rows: any[],\r\n  index: number,\r\n  prevIndex: number,\r\n  comparefn: any\r\n): any[] {\r\n  const reverse = index < prevIndex;\r\n\r\n  for (let i = 0; i < rows.length; i++) {\r\n    const row = rows[i];\r\n    const greater = i >= prevIndex && i <= index;\r\n    const lesser = i <= prevIndex && i >= index;\r\n\r\n    let range = { start: 0, end: 0 };\r\n    if (reverse) {\r\n      range = {\r\n        start: index,\r\n        end: prevIndex\r\n      };\r\n    } else {\r\n      range = {\r\n        start: prevIndex,\r\n        end: index + 1\r\n      };\r\n    }\r\n\r\n    if ((reverse && lesser) || (!reverse && greater)) {\r\n      // if in the positive range to be added to `selected`, and\r\n      // not already in the selected array, add it\r\n      if (i >= range.start && i <= range.end) {\r\n        selected.push(row);\r\n      }\r\n    }\r\n  }\r\n\r\n  return selected;\r\n}\r\n","import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy } from '@angular/core';\r\nimport { SelectionType } from '../../types/selection.type';\r\nimport { selectRowsBetween, selectRows } from '../../utils/selection';\r\nimport { Keys } from '../../utils/keys';\r\n\r\nexport interface Model {\r\n  type: string;\r\n  event: MouseEvent | KeyboardEvent;\r\n  row: any;\r\n  rowElement: any;\r\n  cellElement: any;\r\n  cellIndex: number;\r\n}\r\n\r\n@Component({\r\n  selector: 'datatable-selection',\r\n  template: ` <ng-content></ng-content> `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DataTableSelectionComponent {\r\n  @Input() rows: any[];\r\n  @Input() selected: any[];\r\n  @Input() selectEnabled: boolean;\r\n  @Input() selectionType: SelectionType;\r\n  @Input() rowIdentity: any;\r\n  @Input() selectCheck: any;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() select: EventEmitter<any> = new EventEmitter();\r\n\r\n  prevIndex: number;\r\n\r\n  selectRow(event: KeyboardEvent | MouseEvent, index: number, row: any): void {\r\n    if (!this.selectEnabled) return;\r\n\r\n    if (event instanceof MouseEvent && event.type === 'click' && event.composedPath()) {\r\n      const path = event.composedPath();\r\n      for (let i = 0; !path[i]['localName'].startsWith('datatable-') && i < path.length; i++) {\r\n        if (path[i]['localName'] === 'button' || path[i]['localName'] === 'a') {\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    const chkbox = this.selectionType === SelectionType.checkbox;\r\n    const multi = this.selectionType === SelectionType.multi;\r\n    const multiClick = this.selectionType === SelectionType.multiClick;\r\n    let selected: any[] = [];\r\n\r\n    if (multi || chkbox || multiClick) {\r\n      if (event.shiftKey) {\r\n        selected = selectRowsBetween([], this.rows, index, this.prevIndex, this.getRowSelectedIdx.bind(this));\r\n      } else if (event.ctrlKey || event.metaKey || multiClick || chkbox) {\r\n        selected = selectRows([...this.selected], row, this.getRowSelectedIdx.bind(this));\r\n      } else {\r\n        selected = selectRows([], row, this.getRowSelectedIdx.bind(this));\r\n      }\r\n    } else {\r\n      selected = selectRows([], row, this.getRowSelectedIdx.bind(this));\r\n    }\r\n\r\n    if (typeof this.selectCheck === 'function') {\r\n      selected = selected.filter(this.selectCheck.bind(this));\r\n    }\r\n\r\n    this.selected.splice(0, this.selected.length);\r\n    this.selected.push(...selected);\r\n\r\n    this.prevIndex = index;\r\n\r\n    this.select.emit({\r\n      selected\r\n    });\r\n  }\r\n\r\n  onActivate(model: Model, index: number): void {\r\n    const { type, event, row } = model;\r\n    const chkbox = this.selectionType === SelectionType.checkbox;\r\n    const select = (!chkbox && (type === 'click' || type === 'dblclick')) || (chkbox && type === 'checkbox');\r\n\r\n    if (select) {\r\n      this.selectRow(event, index, row);\r\n    } else if (type === 'keydown') {\r\n      if ((<KeyboardEvent>event).keyCode === Keys.return) {\r\n        this.selectRow(event, index, row);\r\n      } else {\r\n        this.onKeyboardFocus(model);\r\n      }\r\n    }\r\n    this.activate.emit(model);\r\n  }\r\n\r\n  onKeyboardFocus(model: Model): void {\r\n    const { keyCode } = <KeyboardEvent>model.event;\r\n    const shouldFocus = keyCode === Keys.up || keyCode === Keys.down || keyCode === Keys.right || keyCode === Keys.left;\r\n\r\n    if (shouldFocus) {\r\n      const isCellSelection = this.selectionType === SelectionType.cell;\r\n\r\n      if (!model.cellElement || !isCellSelection) {\r\n        this.focusRow(model.rowElement, keyCode);\r\n      } else if (isCellSelection) {\r\n        this.focusCell(model.cellElement, model.rowElement, keyCode, model.cellIndex);\r\n      }\r\n    }\r\n  }\r\n\r\n  focusRow(rowElement: any, keyCode: number): void {\r\n    const nextRowElement = this.getPrevNextRow(rowElement, keyCode);\r\n    if (nextRowElement) nextRowElement.focus();\r\n  }\r\n\r\n  getPrevNextRow(rowElement: any, keyCode: number): any {\r\n    const parentElement = rowElement.parentElement;\r\n\r\n    if (parentElement) {\r\n      let focusElement: HTMLElement;\r\n      if (keyCode === Keys.up) {\r\n        focusElement = parentElement.previousElementSibling;\r\n      } else if (keyCode === Keys.down) {\r\n        focusElement = parentElement.nextElementSibling;\r\n      }\r\n\r\n      if (focusElement && focusElement.children.length) {\r\n        return focusElement.children[0];\r\n      }\r\n    }\r\n  }\r\n\r\n  focusCell(cellElement: any, rowElement: any, keyCode: number, cellIndex: number): void {\r\n    let nextCellElement: HTMLElement;\r\n\r\n    if (keyCode === Keys.left) {\r\n      nextCellElement = cellElement.previousElementSibling;\r\n    } else if (keyCode === Keys.right) {\r\n      nextCellElement = cellElement.nextElementSibling;\r\n    } else if (keyCode === Keys.up || keyCode === Keys.down) {\r\n      const nextRowElement = this.getPrevNextRow(rowElement, keyCode);\r\n      if (nextRowElement) {\r\n        const children = nextRowElement.getElementsByClassName('datatable-body-cell');\r\n        if (children.length) nextCellElement = children[cellIndex];\r\n      }\r\n    }\r\n\r\n    if (nextCellElement) nextCellElement.focus();\r\n  }\r\n\r\n  getRowSelected(row: any): boolean {\r\n    return this.getRowSelectedIdx(row, this.selected) > -1;\r\n  }\r\n\r\n  getRowSelectedIdx(row: any, selected: any[]): number {\r\n    if (!selected || !selected.length) return -1;\r\n\r\n    const rowId = this.rowIdentity(row);\r\n    return selected.findIndex(r => {\r\n      const id = this.rowIdentity(r);\r\n      return id === rowId;\r\n    });\r\n  }\r\n}\r\n","import { Component, Input, OnChanges, PipeTransform, TemplateRef } from '@angular/core';\r\n\r\nexport interface ISummaryColumn {\r\n  summaryFunc?: (cells: any[]) => any;\r\n  summaryTemplate?: TemplateRef<any>;\r\n\r\n  prop: string;\r\n  pipe?: PipeTransform;\r\n}\r\n\r\nfunction defaultSumFunc(cells: any[]): any {\r\n  const cellsWithValues = cells.filter(cell => !!cell);\r\n\r\n  if (!cellsWithValues.length) {\r\n    return null;\r\n  }\r\n  if (cellsWithValues.some(cell => typeof cell !== 'number')) {\r\n    return null;\r\n  }\r\n\r\n  return cellsWithValues.reduce((res, cell) => res + cell);\r\n}\r\n\r\nfunction noopSumFunc(cells: any[]): void {\r\n  return null;\r\n}\r\n\r\n@Component({\r\n  selector: 'datatable-summary-row',\r\n  template: `\r\n    <datatable-body-row\r\n      *ngIf=\"summaryRow && _internalColumns\"\r\n      tabindex=\"-1\"\r\n      [innerWidth]=\"innerWidth\"\r\n      [offsetX]=\"offsetX\"\r\n      [columns]=\"_internalColumns\"\r\n      [rowHeight]=\"rowHeight\"\r\n      [row]=\"summaryRow\"\r\n      [rowIndex]=\"-1\"\r\n    >\r\n    </datatable-body-row>\r\n  `,\r\n  host: {\r\n    class: 'datatable-summary-row'\r\n  }\r\n})\r\nexport class DataTableSummaryRowComponent implements OnChanges {\r\n  @Input() rows: any[];\r\n  @Input() columns: ISummaryColumn[];\r\n\r\n  @Input() rowHeight: number;\r\n  @Input() offsetX: number;\r\n  @Input() innerWidth: number;\r\n\r\n  _internalColumns: ISummaryColumn[];\r\n  summaryRow: any = {};\r\n\r\n  ngOnChanges() {\r\n    if (!this.columns || !this.rows) {\r\n      return;\r\n    }\r\n    this.updateInternalColumns();\r\n    this.updateValues();\r\n  }\r\n\r\n  private updateInternalColumns() {\r\n    this._internalColumns = this.columns.map(col => ({\r\n      ...col,\r\n      cellTemplate: col.summaryTemplate\r\n    }));\r\n  }\r\n\r\n  private updateValues() {\r\n    this.summaryRow = {};\r\n\r\n    this.columns\r\n      .filter(col => !col.summaryTemplate)\r\n      .forEach(col => {\r\n        const cellsFromSingleColumn = this.rows.map(row => row[col.prop]);\r\n        const sumFunc = this.getSummaryFunction(col);\r\n\r\n        this.summaryRow[col.prop] = col.pipe\r\n          ? col.pipe.transform(sumFunc(cellsFromSingleColumn))\r\n          : sumFunc(cellsFromSingleColumn);\r\n      });\r\n  }\r\n\r\n  private getSummaryFunction(column: ISummaryColumn): (a: any[]) => any {\r\n    if (column.summaryFunc === undefined) {\r\n      return defaultSumFunc;\r\n    } else if (column.summaryFunc === null) {\r\n      return noopSumFunc;\r\n    } else {\r\n      return column.summaryFunc;\r\n    }\r\n  }\r\n}\r\n","export enum ClickType {\r\n  single = 'single',\r\n  double = 'double'\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ScrollbarHelper } from './services/scrollbar-helper.service';\r\nimport { DimensionsHelper } from './services/dimensions-helper.service';\r\nimport { ColumnChangesService } from './services/column-changes.service';\r\nimport { DataTableFooterTemplateDirective } from './components/footer/footer-template.directive';\r\nimport { VisibilityDirective } from './directives/visibility.directive';\r\nimport { DraggableDirective } from './directives/draggable.directive';\r\nimport { ResizeableDirective } from './directives/resizeable.directive';\r\nimport { OrderableDirective } from './directives/orderable.directive';\r\nimport { LongPressDirective } from './directives/long-press.directive';\r\nimport { ScrollerComponent } from './components/body/scroller.component';\r\nimport { DatatableComponent } from './components/datatable.component';\r\nimport { DataTableColumnDirective } from './components/columns/column.directive';\r\nimport { DataTableHeaderComponent } from './components/header/header.component';\r\nimport { DataTableHeaderCellComponent } from './components/header/header-cell.component';\r\nimport { DataTableBodyComponent } from './components/body/body.component';\r\nimport { DataTableFooterComponent } from './components/footer/footer.component';\r\nimport { DataTablePagerComponent } from './components/footer/pager.component';\r\nimport { ProgressBarComponent } from './components/body/progress-bar.component';\r\nimport { DataTableBodyRowComponent } from './components/body/body-row.component';\r\nimport { DataTableRowWrapperComponent } from './components/body/body-row-wrapper.component';\r\nimport { DatatableRowDetailDirective } from './components/row-detail/row-detail.directive';\r\nimport { DatatableGroupHeaderDirective } from './components/body/body-group-header.directive';\r\nimport { DatatableRowDetailTemplateDirective } from './components/row-detail/row-detail-template.directive';\r\nimport { DataTableBodyCellComponent } from './components/body/body-cell.component';\r\nimport { DataTableSelectionComponent } from './components/body/selection.component';\r\nimport { DataTableColumnHeaderDirective } from './components/columns/column-header.directive';\r\nimport { DataTableColumnCellDirective } from './components/columns/column-cell.directive';\r\nimport { DataTableColumnCellTreeToggle } from './components/columns/tree.directive';\r\nimport { DatatableFooterDirective } from './components/footer/footer.directive';\r\nimport { DatatableGroupHeaderTemplateDirective } from './components/body/body-group-header-template.directive';\r\nimport { DataTableSummaryRowComponent } from './components/body/summary/summary-row.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  providers: [ScrollbarHelper, DimensionsHelper, ColumnChangesService],\r\n  declarations: [\r\n    DataTableFooterTemplateDirective,\r\n    VisibilityDirective,\r\n    DraggableDirective,\r\n    ResizeableDirective,\r\n    OrderableDirective,\r\n    LongPressDirective,\r\n    ScrollerComponent,\r\n    DatatableComponent,\r\n    DataTableColumnDirective,\r\n    DataTableHeaderComponent,\r\n    DataTableHeaderCellComponent,\r\n    DataTableBodyComponent,\r\n    DataTableFooterComponent,\r\n    DataTablePagerComponent,\r\n    ProgressBarComponent,\r\n    DataTableBodyRowComponent,\r\n    DataTableRowWrapperComponent,\r\n    DatatableRowDetailDirective,\r\n    DatatableGroupHeaderDirective,\r\n    DatatableRowDetailTemplateDirective,\r\n    DataTableBodyCellComponent,\r\n    DataTableSelectionComponent,\r\n    DataTableColumnHeaderDirective,\r\n    DataTableColumnCellDirective,\r\n    DataTableColumnCellTreeToggle,\r\n    DatatableFooterDirective,\r\n    DatatableGroupHeaderTemplateDirective,\r\n    DataTableSummaryRowComponent\r\n  ],\r\n  exports: [\r\n    DatatableComponent,\r\n    DatatableRowDetailDirective,\r\n    DatatableGroupHeaderDirective,\r\n    DatatableRowDetailTemplateDirective,\r\n    DataTableColumnDirective,\r\n    DataTableColumnHeaderDirective,\r\n    DataTableColumnCellDirective,\r\n    DataTableColumnCellTreeToggle,\r\n    DataTableFooterTemplateDirective,\r\n    DatatableFooterDirective,\r\n    DataTablePagerComponent,\r\n    DatatableGroupHeaderTemplateDirective\r\n  ]\r\n})\r\nexport class NgxDatatableModule {\r\n  /**\r\n   * Configure global configuration via INgxDatatableConfig\r\n   * @param configuration\r\n   */\r\n  static forRoot(configuration: INgxDatatableConfig): ModuleWithProviders<NgxDatatableModule> {\r\n    return {\r\n      ngModule: NgxDatatableModule,\r\n      providers: [{ provide: 'configuration', useValue: configuration }]\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Interface definition for INgxDatatableConfig global configuration\r\n */\r\nexport interface INgxDatatableConfig {\r\n  messages: {\r\n    emptyMessage: string; // Message to show when array is presented, but contains no values\r\n    totalMessage: string; // Footer total message\r\n    selectedMessage: string; // Footer selected message\r\n  };\r\n}\r\n","if (typeof document !== 'undefined' && !document.elementsFromPoint) {\r\n  document.elementsFromPoint = elementsFromPoint;\r\n}\r\n\r\n/*tslint:disable*/\r\n/**\r\n * Polyfill for `elementsFromPoint`\r\n *\r\n * https://developer.mozilla.org/en-US/docs/Web/API/Document/elementsFromPoint\r\n * https://gist.github.com/iddan/54d5d9e58311b0495a91bf06de661380\r\n * https://gist.github.com/oslego/7265412\r\n */\r\nexport function elementsFromPoint(x: number, y: number) {\r\n  const elements = [];\r\n  const previousPointerEvents = [];\r\n  let current: any; // TODO: window.getComputedStyle should be used with inferred type (Element)\r\n  let i;\r\n  let d;\r\n\r\n  //if (document === undefined) return elements;\r\n\r\n  // get all elements via elementFromPoint, and remove them from hit-testing in order\r\n  while ((current = document.elementFromPoint(x, y)) && elements.indexOf(current) === -1 && current != null) {\r\n    // push the element and its current style\r\n    elements.push(current);\r\n    previousPointerEvents.push({\r\n      value: current.style.getPropertyValue('pointer-events'),\r\n      priority: current.style.getPropertyPriority('pointer-events')\r\n    });\r\n\r\n    // add \"pointer-events: none\", to get to the underlying element\r\n    current.style.setProperty('pointer-events', 'none', 'important');\r\n  }\r\n\r\n  // restore the previous pointer-events values\r\n  for (i = previousPointerEvents.length; (d = previousPointerEvents[--i]); ) {\r\n    elements[i].style.setProperty('pointer-events', d.value ? d.value : '', d.priority);\r\n  }\r\n\r\n  // return our results\r\n  return elements;\r\n}\r\n/*tslint:enable*/\r\n"]}